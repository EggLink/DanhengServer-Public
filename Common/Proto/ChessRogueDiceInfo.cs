// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChessRogueDiceInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from ChessRogueDiceInfo.proto</summary>
  public static partial class ChessRogueDiceInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for ChessRogueDiceInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChessRogueDiceInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDaGVzc1JvZ3VlRGljZUluZm8ucHJvdG8aGkNoZXNzUm9ndWVEaWNlU3Rh",
            "dHVzLnByb3RvGhRDaGVzc1JvZ3VlRGljZS5wcm90bxoRQ0ZHSUxIQ0tFQ0ku",
            "cHJvdG8aGENoZXNzUm9ndWVEaWNlVHlwZS5wcm90bxoRREFORUVITUtES04u",
            "cHJvdG8i0AMKEkNoZXNzUm9ndWVEaWNlSW5mbxImCglkaWNlX3R5cGUYByAB",
            "KA4yEy5DaGVzc1JvZ3VlRGljZVR5cGUSEQoJYnJhbmNoX2lkGAsgASgNEioK",
            "C2RpY2Vfc3RhdHVzGAEgASgOMhUuQ2hlc3NSb2d1ZURpY2VTdGF0dXMSEwoL",
            "UE5BQU9BRkZDTUYYDCABKA0SDwoHaXNfZG9uZRgKIAEoCBIiCgtQTEJNS09B",
            "SktQThikCCABKAsyDC5EQU5FRUhNS0RLThIeCgRkaWNlGMMMIAEoCzIPLkNo",
            "ZXNzUm9ndWVEaWNlEhQKDHJlcm9sbF90aW1lcxgFIAEoDRIZChFjdXJfc3Vy",
            "ZmFjZV9pbmRleBgCIAEoDRITCgtjaGVhdF90aW1lcxgJIAEoDRISCgpkaXNw",
            "bGF5X2lkGAQgASgNEhQKC0NHRENMR0dGTUpLGP8IIAMoDRIWCg5jdXJfc3Vy",
            "ZmFjZV9pZBgNIAEoDRIhCgtHTENBQUdLRFBFRRhRIAEoCzIMLkNGR0lMSENL",
            "RUNJEhEKCGlzX3ZhbGlkGLsCIAEoCBIVCg1jdXJfYnJhbmNoX2lkGAggASgN",
            "EhQKC0dDT01OTkxJQ0VMGLwFIAEoBUIeqgIbRWdnTGluay5EYW5oZW5nU2Vy",
            "dmVyLlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.ChessRogueDiceStatusReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceReflection.Descriptor, global::EggLink.DanhengServer.Proto.CFGILHCKECIReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceTypeReflection.Descriptor, global::EggLink.DanhengServer.Proto.DANEEHMKDKNReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo), global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo.Parser, new[]{ "DiceType", "BranchId", "DiceStatus", "PNAAOAFFCMF", "IsDone", "PLBMKOAJKPN", "Dice", "RerollTimes", "CurSurfaceIndex", "CheatTimes", "DisplayId", "CGDCLGGFMJK", "CurSurfaceId", "GLCAAGKDPEE", "IsValid", "CurBranchId", "GCOMNNLICEL" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ChessRogueDiceInfo : pb::IMessage<ChessRogueDiceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChessRogueDiceInfo> _parser = new pb::MessageParser<ChessRogueDiceInfo>(() => new ChessRogueDiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChessRogueDiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.ChessRogueDiceInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo(ChessRogueDiceInfo other) : this() {
      diceType_ = other.diceType_;
      branchId_ = other.branchId_;
      diceStatus_ = other.diceStatus_;
      pNAAOAFFCMF_ = other.pNAAOAFFCMF_;
      isDone_ = other.isDone_;
      pLBMKOAJKPN_ = other.pLBMKOAJKPN_ != null ? other.pLBMKOAJKPN_.Clone() : null;
      dice_ = other.dice_ != null ? other.dice_.Clone() : null;
      rerollTimes_ = other.rerollTimes_;
      curSurfaceIndex_ = other.curSurfaceIndex_;
      cheatTimes_ = other.cheatTimes_;
      displayId_ = other.displayId_;
      cGDCLGGFMJK_ = other.cGDCLGGFMJK_.Clone();
      curSurfaceId_ = other.curSurfaceId_;
      gLCAAGKDPEE_ = other.gLCAAGKDPEE_ != null ? other.gLCAAGKDPEE_.Clone() : null;
      isValid_ = other.isValid_;
      curBranchId_ = other.curBranchId_;
      gCOMNNLICEL_ = other.gCOMNNLICEL_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo Clone() {
      return new ChessRogueDiceInfo(this);
    }

    /// <summary>Field number for the "dice_type" field.</summary>
    public const int DiceTypeFieldNumber = 7;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceType diceType_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceType DiceType {
      get { return diceType_; }
      set {
        diceType_ = value;
      }
    }

    /// <summary>Field number for the "branch_id" field.</summary>
    public const int BranchIdFieldNumber = 11;
    private uint branchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "dice_status" field.</summary>
    public const int DiceStatusFieldNumber = 1;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus diceStatus_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus DiceStatus {
      get { return diceStatus_; }
      set {
        diceStatus_ = value;
      }
    }

    /// <summary>Field number for the "PNAAOAFFCMF" field.</summary>
    public const int PNAAOAFFCMFFieldNumber = 12;
    private uint pNAAOAFFCMF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PNAAOAFFCMF {
      get { return pNAAOAFFCMF_; }
      set {
        pNAAOAFFCMF_ = value;
      }
    }

    /// <summary>Field number for the "is_done" field.</summary>
    public const int IsDoneFieldNumber = 10;
    private bool isDone_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDone {
      get { return isDone_; }
      set {
        isDone_ = value;
      }
    }

    /// <summary>Field number for the "PLBMKOAJKPN" field.</summary>
    public const int PLBMKOAJKPNFieldNumber = 1060;
    private global::EggLink.DanhengServer.Proto.DANEEHMKDKN pLBMKOAJKPN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.DANEEHMKDKN PLBMKOAJKPN {
      get { return pLBMKOAJKPN_; }
      set {
        pLBMKOAJKPN_ = value;
      }
    }

    /// <summary>Field number for the "dice" field.</summary>
    public const int DiceFieldNumber = 1603;
    private global::EggLink.DanhengServer.Proto.ChessRogueDice dice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDice Dice {
      get { return dice_; }
      set {
        dice_ = value;
      }
    }

    /// <summary>Field number for the "reroll_times" field.</summary>
    public const int RerollTimesFieldNumber = 5;
    private uint rerollTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RerollTimes {
      get { return rerollTimes_; }
      set {
        rerollTimes_ = value;
      }
    }

    /// <summary>Field number for the "cur_surface_index" field.</summary>
    public const int CurSurfaceIndexFieldNumber = 2;
    private uint curSurfaceIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceIndex {
      get { return curSurfaceIndex_; }
      set {
        curSurfaceIndex_ = value;
      }
    }

    /// <summary>Field number for the "cheat_times" field.</summary>
    public const int CheatTimesFieldNumber = 9;
    private uint cheatTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CheatTimes {
      get { return cheatTimes_; }
      set {
        cheatTimes_ = value;
      }
    }

    /// <summary>Field number for the "display_id" field.</summary>
    public const int DisplayIdFieldNumber = 4;
    private uint displayId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DisplayId {
      get { return displayId_; }
      set {
        displayId_ = value;
      }
    }

    /// <summary>Field number for the "CGDCLGGFMJK" field.</summary>
    public const int CGDCLGGFMJKFieldNumber = 1151;
    private static readonly pb::FieldCodec<uint> _repeated_cGDCLGGFMJK_codec
        = pb::FieldCodec.ForUInt32(9210);
    private readonly pbc::RepeatedField<uint> cGDCLGGFMJK_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> CGDCLGGFMJK {
      get { return cGDCLGGFMJK_; }
    }

    /// <summary>Field number for the "cur_surface_id" field.</summary>
    public const int CurSurfaceIdFieldNumber = 13;
    private uint curSurfaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceId {
      get { return curSurfaceId_; }
      set {
        curSurfaceId_ = value;
      }
    }

    /// <summary>Field number for the "GLCAAGKDPEE" field.</summary>
    public const int GLCAAGKDPEEFieldNumber = 81;
    private global::EggLink.DanhengServer.Proto.CFGILHCKECI gLCAAGKDPEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.CFGILHCKECI GLCAAGKDPEE {
      get { return gLCAAGKDPEE_; }
      set {
        gLCAAGKDPEE_ = value;
      }
    }

    /// <summary>Field number for the "is_valid" field.</summary>
    public const int IsValidFieldNumber = 315;
    private bool isValid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsValid {
      get { return isValid_; }
      set {
        isValid_ = value;
      }
    }

    /// <summary>Field number for the "cur_branch_id" field.</summary>
    public const int CurBranchIdFieldNumber = 8;
    private uint curBranchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurBranchId {
      get { return curBranchId_; }
      set {
        curBranchId_ = value;
      }
    }

    /// <summary>Field number for the "GCOMNNLICEL" field.</summary>
    public const int GCOMNNLICELFieldNumber = 700;
    private int gCOMNNLICEL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GCOMNNLICEL {
      get { return gCOMNNLICEL_; }
      set {
        gCOMNNLICEL_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChessRogueDiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChessRogueDiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiceType != other.DiceType) return false;
      if (BranchId != other.BranchId) return false;
      if (DiceStatus != other.DiceStatus) return false;
      if (PNAAOAFFCMF != other.PNAAOAFFCMF) return false;
      if (IsDone != other.IsDone) return false;
      if (!object.Equals(PLBMKOAJKPN, other.PLBMKOAJKPN)) return false;
      if (!object.Equals(Dice, other.Dice)) return false;
      if (RerollTimes != other.RerollTimes) return false;
      if (CurSurfaceIndex != other.CurSurfaceIndex) return false;
      if (CheatTimes != other.CheatTimes) return false;
      if (DisplayId != other.DisplayId) return false;
      if(!cGDCLGGFMJK_.Equals(other.cGDCLGGFMJK_)) return false;
      if (CurSurfaceId != other.CurSurfaceId) return false;
      if (!object.Equals(GLCAAGKDPEE, other.GLCAAGKDPEE)) return false;
      if (IsValid != other.IsValid) return false;
      if (CurBranchId != other.CurBranchId) return false;
      if (GCOMNNLICEL != other.GCOMNNLICEL) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) hash ^= DiceType.GetHashCode();
      if (BranchId != 0) hash ^= BranchId.GetHashCode();
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) hash ^= DiceStatus.GetHashCode();
      if (PNAAOAFFCMF != 0) hash ^= PNAAOAFFCMF.GetHashCode();
      if (IsDone != false) hash ^= IsDone.GetHashCode();
      if (pLBMKOAJKPN_ != null) hash ^= PLBMKOAJKPN.GetHashCode();
      if (dice_ != null) hash ^= Dice.GetHashCode();
      if (RerollTimes != 0) hash ^= RerollTimes.GetHashCode();
      if (CurSurfaceIndex != 0) hash ^= CurSurfaceIndex.GetHashCode();
      if (CheatTimes != 0) hash ^= CheatTimes.GetHashCode();
      if (DisplayId != 0) hash ^= DisplayId.GetHashCode();
      hash ^= cGDCLGGFMJK_.GetHashCode();
      if (CurSurfaceId != 0) hash ^= CurSurfaceId.GetHashCode();
      if (gLCAAGKDPEE_ != null) hash ^= GLCAAGKDPEE.GetHashCode();
      if (IsValid != false) hash ^= IsValid.GetHashCode();
      if (CurBranchId != 0) hash ^= CurBranchId.GetHashCode();
      if (GCOMNNLICEL != 0) hash ^= GCOMNNLICEL.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DiceStatus);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (DisplayId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DisplayId);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RerollTimes);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DiceType);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CurBranchId);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CheatTimes);
      }
      if (IsDone != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsDone);
      }
      if (BranchId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(BranchId);
      }
      if (PNAAOAFFCMF != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PNAAOAFFCMF);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurSurfaceId);
      }
      if (gLCAAGKDPEE_ != null) {
        output.WriteRawTag(138, 5);
        output.WriteMessage(GLCAAGKDPEE);
      }
      if (IsValid != false) {
        output.WriteRawTag(216, 19);
        output.WriteBool(IsValid);
      }
      if (GCOMNNLICEL != 0) {
        output.WriteRawTag(224, 43);
        output.WriteInt32(GCOMNNLICEL);
      }
      if (pLBMKOAJKPN_ != null) {
        output.WriteRawTag(162, 66);
        output.WriteMessage(PLBMKOAJKPN);
      }
      cGDCLGGFMJK_.WriteTo(output, _repeated_cGDCLGGFMJK_codec);
      if (dice_ != null) {
        output.WriteRawTag(154, 100);
        output.WriteMessage(Dice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DiceStatus);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (DisplayId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DisplayId);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(RerollTimes);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DiceType);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(CurBranchId);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CheatTimes);
      }
      if (IsDone != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsDone);
      }
      if (BranchId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(BranchId);
      }
      if (PNAAOAFFCMF != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(PNAAOAFFCMF);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurSurfaceId);
      }
      if (gLCAAGKDPEE_ != null) {
        output.WriteRawTag(138, 5);
        output.WriteMessage(GLCAAGKDPEE);
      }
      if (IsValid != false) {
        output.WriteRawTag(216, 19);
        output.WriteBool(IsValid);
      }
      if (GCOMNNLICEL != 0) {
        output.WriteRawTag(224, 43);
        output.WriteInt32(GCOMNNLICEL);
      }
      if (pLBMKOAJKPN_ != null) {
        output.WriteRawTag(162, 66);
        output.WriteMessage(PLBMKOAJKPN);
      }
      cGDCLGGFMJK_.WriteTo(ref output, _repeated_cGDCLGGFMJK_codec);
      if (dice_ != null) {
        output.WriteRawTag(154, 100);
        output.WriteMessage(Dice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceType);
      }
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceStatus);
      }
      if (PNAAOAFFCMF != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PNAAOAFFCMF);
      }
      if (IsDone != false) {
        size += 1 + 1;
      }
      if (pLBMKOAJKPN_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PLBMKOAJKPN);
      }
      if (dice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dice);
      }
      if (RerollTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RerollTimes);
      }
      if (CurSurfaceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceIndex);
      }
      if (CheatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheatTimes);
      }
      if (DisplayId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplayId);
      }
      size += cGDCLGGFMJK_.CalculateSize(_repeated_cGDCLGGFMJK_codec);
      if (CurSurfaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceId);
      }
      if (gLCAAGKDPEE_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GLCAAGKDPEE);
      }
      if (IsValid != false) {
        size += 2 + 1;
      }
      if (CurBranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurBranchId);
      }
      if (GCOMNNLICEL != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GCOMNNLICEL);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChessRogueDiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        DiceType = other.DiceType;
      }
      if (other.BranchId != 0) {
        BranchId = other.BranchId;
      }
      if (other.DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        DiceStatus = other.DiceStatus;
      }
      if (other.PNAAOAFFCMF != 0) {
        PNAAOAFFCMF = other.PNAAOAFFCMF;
      }
      if (other.IsDone != false) {
        IsDone = other.IsDone;
      }
      if (other.pLBMKOAJKPN_ != null) {
        if (pLBMKOAJKPN_ == null) {
          PLBMKOAJKPN = new global::EggLink.DanhengServer.Proto.DANEEHMKDKN();
        }
        PLBMKOAJKPN.MergeFrom(other.PLBMKOAJKPN);
      }
      if (other.dice_ != null) {
        if (dice_ == null) {
          Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
        }
        Dice.MergeFrom(other.Dice);
      }
      if (other.RerollTimes != 0) {
        RerollTimes = other.RerollTimes;
      }
      if (other.CurSurfaceIndex != 0) {
        CurSurfaceIndex = other.CurSurfaceIndex;
      }
      if (other.CheatTimes != 0) {
        CheatTimes = other.CheatTimes;
      }
      if (other.DisplayId != 0) {
        DisplayId = other.DisplayId;
      }
      cGDCLGGFMJK_.Add(other.cGDCLGGFMJK_);
      if (other.CurSurfaceId != 0) {
        CurSurfaceId = other.CurSurfaceId;
      }
      if (other.gLCAAGKDPEE_ != null) {
        if (gLCAAGKDPEE_ == null) {
          GLCAAGKDPEE = new global::EggLink.DanhengServer.Proto.CFGILHCKECI();
        }
        GLCAAGKDPEE.MergeFrom(other.GLCAAGKDPEE);
      }
      if (other.IsValid != false) {
        IsValid = other.IsValid;
      }
      if (other.CurBranchId != 0) {
        CurBranchId = other.CurBranchId;
      }
      if (other.GCOMNNLICEL != 0) {
        GCOMNNLICEL = other.GCOMNNLICEL;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 16: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            DisplayId = input.ReadUInt32();
            break;
          }
          case 40: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 56: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 64: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 72: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 80: {
            IsDone = input.ReadBool();
            break;
          }
          case 88: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 96: {
            PNAAOAFFCMF = input.ReadUInt32();
            break;
          }
          case 104: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 650: {
            if (gLCAAGKDPEE_ == null) {
              GLCAAGKDPEE = new global::EggLink.DanhengServer.Proto.CFGILHCKECI();
            }
            input.ReadMessage(GLCAAGKDPEE);
            break;
          }
          case 2520: {
            IsValid = input.ReadBool();
            break;
          }
          case 5600: {
            GCOMNNLICEL = input.ReadInt32();
            break;
          }
          case 8482: {
            if (pLBMKOAJKPN_ == null) {
              PLBMKOAJKPN = new global::EggLink.DanhengServer.Proto.DANEEHMKDKN();
            }
            input.ReadMessage(PLBMKOAJKPN);
            break;
          }
          case 9210:
          case 9208: {
            cGDCLGGFMJK_.AddEntriesFrom(input, _repeated_cGDCLGGFMJK_codec);
            break;
          }
          case 12826: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 16: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 32: {
            DisplayId = input.ReadUInt32();
            break;
          }
          case 40: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 56: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 64: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 72: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 80: {
            IsDone = input.ReadBool();
            break;
          }
          case 88: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 96: {
            PNAAOAFFCMF = input.ReadUInt32();
            break;
          }
          case 104: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 650: {
            if (gLCAAGKDPEE_ == null) {
              GLCAAGKDPEE = new global::EggLink.DanhengServer.Proto.CFGILHCKECI();
            }
            input.ReadMessage(GLCAAGKDPEE);
            break;
          }
          case 2520: {
            IsValid = input.ReadBool();
            break;
          }
          case 5600: {
            GCOMNNLICEL = input.ReadInt32();
            break;
          }
          case 8482: {
            if (pLBMKOAJKPN_ == null) {
              PLBMKOAJKPN = new global::EggLink.DanhengServer.Proto.DANEEHMKDKN();
            }
            input.ReadMessage(PLBMKOAJKPN);
            break;
          }
          case 9210:
          case 9208: {
            cGDCLGGFMJK_.AddEntriesFrom(ref input, _repeated_cGDCLGGFMJK_codec);
            break;
          }
          case 12826: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
