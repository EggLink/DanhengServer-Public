// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ChessRogueDiceInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from ChessRogueDiceInfo.proto</summary>
  public static partial class ChessRogueDiceInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for ChessRogueDiceInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChessRogueDiceInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhDaGVzc1JvZ3VlRGljZUluZm8ucHJvdG8aEUtFR1BBSUVKQkdFLnByb3Rv",
            "GhRDaGVzc1JvZ3VlRGljZS5wcm90bxoRTE5PUE1QUEFCS0oucHJvdG8aGENo",
            "ZXNzUm9ndWVEaWNlVHlwZS5wcm90bxoaQ2hlc3NSb2d1ZURpY2VTdGF0dXMu",
            "cHJvdG8i3QMKEkNoZXNzUm9ndWVEaWNlSW5mbxIUCgxyZXJvbGxfdGltZXMY",
            "BiABKA0SEwoLT1BJSUJGRUpGSEQYDSABKAgSEwoLTk5MR0ZHRktHQkUYDCAB",
            "KA0SIgoLSVBGQ0xCQ05HQUEY6QogASgLMgwuTE5PUE1QUEFCS0oSHgoEZGlj",
            "ZRjmCyABKAsyDy5DaGVzc1JvZ3VlRGljZRIZChFjdXJfc3VyZmFjZV9pbmRl",
            "eBgJIAEoDRIYCg9jYW5fcmVyb2xsX2RpY2UY+AMgASgIEhYKDmN1cl9zdXJm",
            "YWNlX2lkGAMgASgNEhMKC2NoZWF0X3RpbWVzGA4gASgNEhQKC0FLTUVFREJC",
            "RE5JGIwNIAMoDRIRCglicmFuY2hfaWQYCCABKA0SIgoLQkRNQklESEZLSkYY",
            "ywYgASgLMgwuS0VHUEFJRUpCR0USJgoJZGljZV90eXBlGAEgASgOMhMuQ2hl",
            "c3NSb2d1ZURpY2VUeXBlEhQKC09KSkhLREFLQkdQGNYDIAEoBRITCgtGTEZB",
            "R0RGR1BNQxgFIAEoDRIqCgtkaWNlX3N0YXR1cxgLIAEoDjIVLkNoZXNzUm9n",
            "dWVEaWNlU3RhdHVzEhUKDWN1cl9icmFuY2hfaWQYCiABKA1CHqoCG0VnZ0xp",
            "bmsuRGFuaGVuZ1NlcnZlci5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.KEGPAIEJBGEReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceReflection.Descriptor, global::EggLink.DanhengServer.Proto.LNOPMPPABKJReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceTypeReflection.Descriptor, global::EggLink.DanhengServer.Proto.ChessRogueDiceStatusReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo), global::EggLink.DanhengServer.Proto.ChessRogueDiceInfo.Parser, new[]{ "RerollTimes", "OPIIBFEJFHD", "NNLGFGFKGBE", "IPFCLBCNGAA", "Dice", "CurSurfaceIndex", "CanRerollDice", "CurSurfaceId", "CheatTimes", "AKMEEDBBDNI", "BranchId", "BDMBIDHFKJF", "DiceType", "OJJHKDAKBGP", "FLFAGDFGPMC", "DiceStatus", "CurBranchId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ChessRogueDiceInfo : pb::IMessage<ChessRogueDiceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChessRogueDiceInfo> _parser = new pb::MessageParser<ChessRogueDiceInfo>(() => new ChessRogueDiceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ChessRogueDiceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.ChessRogueDiceInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo(ChessRogueDiceInfo other) : this() {
      rerollTimes_ = other.rerollTimes_;
      oPIIBFEJFHD_ = other.oPIIBFEJFHD_;
      nNLGFGFKGBE_ = other.nNLGFGFKGBE_;
      iPFCLBCNGAA_ = other.iPFCLBCNGAA_ != null ? other.iPFCLBCNGAA_.Clone() : null;
      dice_ = other.dice_ != null ? other.dice_.Clone() : null;
      curSurfaceIndex_ = other.curSurfaceIndex_;
      canRerollDice_ = other.canRerollDice_;
      curSurfaceId_ = other.curSurfaceId_;
      cheatTimes_ = other.cheatTimes_;
      aKMEEDBBDNI_ = other.aKMEEDBBDNI_.Clone();
      branchId_ = other.branchId_;
      bDMBIDHFKJF_ = other.bDMBIDHFKJF_ != null ? other.bDMBIDHFKJF_.Clone() : null;
      diceType_ = other.diceType_;
      oJJHKDAKBGP_ = other.oJJHKDAKBGP_;
      fLFAGDFGPMC_ = other.fLFAGDFGPMC_;
      diceStatus_ = other.diceStatus_;
      curBranchId_ = other.curBranchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ChessRogueDiceInfo Clone() {
      return new ChessRogueDiceInfo(this);
    }

    /// <summary>Field number for the "reroll_times" field.</summary>
    public const int RerollTimesFieldNumber = 6;
    private uint rerollTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RerollTimes {
      get { return rerollTimes_; }
      set {
        rerollTimes_ = value;
      }
    }

    /// <summary>Field number for the "OPIIBFEJFHD" field.</summary>
    public const int OPIIBFEJFHDFieldNumber = 13;
    private bool oPIIBFEJFHD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OPIIBFEJFHD {
      get { return oPIIBFEJFHD_; }
      set {
        oPIIBFEJFHD_ = value;
      }
    }

    /// <summary>Field number for the "NNLGFGFKGBE" field.</summary>
    public const int NNLGFGFKGBEFieldNumber = 12;
    private uint nNLGFGFKGBE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NNLGFGFKGBE {
      get { return nNLGFGFKGBE_; }
      set {
        nNLGFGFKGBE_ = value;
      }
    }

    /// <summary>Field number for the "IPFCLBCNGAA" field.</summary>
    public const int IPFCLBCNGAAFieldNumber = 1385;
    private global::EggLink.DanhengServer.Proto.LNOPMPPABKJ iPFCLBCNGAA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.LNOPMPPABKJ IPFCLBCNGAA {
      get { return iPFCLBCNGAA_; }
      set {
        iPFCLBCNGAA_ = value;
      }
    }

    /// <summary>Field number for the "dice" field.</summary>
    public const int DiceFieldNumber = 1510;
    private global::EggLink.DanhengServer.Proto.ChessRogueDice dice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDice Dice {
      get { return dice_; }
      set {
        dice_ = value;
      }
    }

    /// <summary>Field number for the "cur_surface_index" field.</summary>
    public const int CurSurfaceIndexFieldNumber = 9;
    private uint curSurfaceIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceIndex {
      get { return curSurfaceIndex_; }
      set {
        curSurfaceIndex_ = value;
      }
    }

    /// <summary>Field number for the "can_reroll_dice" field.</summary>
    public const int CanRerollDiceFieldNumber = 504;
    private bool canRerollDice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CanRerollDice {
      get { return canRerollDice_; }
      set {
        canRerollDice_ = value;
      }
    }

    /// <summary>Field number for the "cur_surface_id" field.</summary>
    public const int CurSurfaceIdFieldNumber = 3;
    private uint curSurfaceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurSurfaceId {
      get { return curSurfaceId_; }
      set {
        curSurfaceId_ = value;
      }
    }

    /// <summary>Field number for the "cheat_times" field.</summary>
    public const int CheatTimesFieldNumber = 14;
    private uint cheatTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CheatTimes {
      get { return cheatTimes_; }
      set {
        cheatTimes_ = value;
      }
    }

    /// <summary>Field number for the "AKMEEDBBDNI" field.</summary>
    public const int AKMEEDBBDNIFieldNumber = 1676;
    private static readonly pb::FieldCodec<uint> _repeated_aKMEEDBBDNI_codec
        = pb::FieldCodec.ForUInt32(13410);
    private readonly pbc::RepeatedField<uint> aKMEEDBBDNI_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AKMEEDBBDNI {
      get { return aKMEEDBBDNI_; }
    }

    /// <summary>Field number for the "branch_id" field.</summary>
    public const int BranchIdFieldNumber = 8;
    private uint branchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint BranchId {
      get { return branchId_; }
      set {
        branchId_ = value;
      }
    }

    /// <summary>Field number for the "BDMBIDHFKJF" field.</summary>
    public const int BDMBIDHFKJFFieldNumber = 843;
    private global::EggLink.DanhengServer.Proto.KEGPAIEJBGE bDMBIDHFKJF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.KEGPAIEJBGE BDMBIDHFKJF {
      get { return bDMBIDHFKJF_; }
      set {
        bDMBIDHFKJF_ = value;
      }
    }

    /// <summary>Field number for the "dice_type" field.</summary>
    public const int DiceTypeFieldNumber = 1;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceType diceType_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceType DiceType {
      get { return diceType_; }
      set {
        diceType_ = value;
      }
    }

    /// <summary>Field number for the "OJJHKDAKBGP" field.</summary>
    public const int OJJHKDAKBGPFieldNumber = 470;
    private int oJJHKDAKBGP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OJJHKDAKBGP {
      get { return oJJHKDAKBGP_; }
      set {
        oJJHKDAKBGP_ = value;
      }
    }

    /// <summary>Field number for the "FLFAGDFGPMC" field.</summary>
    public const int FLFAGDFGPMCFieldNumber = 5;
    private uint fLFAGDFGPMC_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint FLFAGDFGPMC {
      get { return fLFAGDFGPMC_; }
      set {
        fLFAGDFGPMC_ = value;
      }
    }

    /// <summary>Field number for the "dice_status" field.</summary>
    public const int DiceStatusFieldNumber = 11;
    private global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus diceStatus_ = global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus DiceStatus {
      get { return diceStatus_; }
      set {
        diceStatus_ = value;
      }
    }

    /// <summary>Field number for the "cur_branch_id" field.</summary>
    public const int CurBranchIdFieldNumber = 10;
    private uint curBranchId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurBranchId {
      get { return curBranchId_; }
      set {
        curBranchId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ChessRogueDiceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ChessRogueDiceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RerollTimes != other.RerollTimes) return false;
      if (OPIIBFEJFHD != other.OPIIBFEJFHD) return false;
      if (NNLGFGFKGBE != other.NNLGFGFKGBE) return false;
      if (!object.Equals(IPFCLBCNGAA, other.IPFCLBCNGAA)) return false;
      if (!object.Equals(Dice, other.Dice)) return false;
      if (CurSurfaceIndex != other.CurSurfaceIndex) return false;
      if (CanRerollDice != other.CanRerollDice) return false;
      if (CurSurfaceId != other.CurSurfaceId) return false;
      if (CheatTimes != other.CheatTimes) return false;
      if(!aKMEEDBBDNI_.Equals(other.aKMEEDBBDNI_)) return false;
      if (BranchId != other.BranchId) return false;
      if (!object.Equals(BDMBIDHFKJF, other.BDMBIDHFKJF)) return false;
      if (DiceType != other.DiceType) return false;
      if (OJJHKDAKBGP != other.OJJHKDAKBGP) return false;
      if (FLFAGDFGPMC != other.FLFAGDFGPMC) return false;
      if (DiceStatus != other.DiceStatus) return false;
      if (CurBranchId != other.CurBranchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (RerollTimes != 0) hash ^= RerollTimes.GetHashCode();
      if (OPIIBFEJFHD != false) hash ^= OPIIBFEJFHD.GetHashCode();
      if (NNLGFGFKGBE != 0) hash ^= NNLGFGFKGBE.GetHashCode();
      if (iPFCLBCNGAA_ != null) hash ^= IPFCLBCNGAA.GetHashCode();
      if (dice_ != null) hash ^= Dice.GetHashCode();
      if (CurSurfaceIndex != 0) hash ^= CurSurfaceIndex.GetHashCode();
      if (CanRerollDice != false) hash ^= CanRerollDice.GetHashCode();
      if (CurSurfaceId != 0) hash ^= CurSurfaceId.GetHashCode();
      if (CheatTimes != 0) hash ^= CheatTimes.GetHashCode();
      hash ^= aKMEEDBBDNI_.GetHashCode();
      if (BranchId != 0) hash ^= BranchId.GetHashCode();
      if (bDMBIDHFKJF_ != null) hash ^= BDMBIDHFKJF.GetHashCode();
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) hash ^= DiceType.GetHashCode();
      if (OJJHKDAKBGP != 0) hash ^= OJJHKDAKBGP.GetHashCode();
      if (FLFAGDFGPMC != 0) hash ^= FLFAGDFGPMC.GetHashCode();
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) hash ^= DiceStatus.GetHashCode();
      if (CurBranchId != 0) hash ^= CurBranchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DiceType);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurSurfaceId);
      }
      if (FLFAGDFGPMC != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FLFAGDFGPMC);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RerollTimes);
      }
      if (BranchId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BranchId);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CurBranchId);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(88);
        output.WriteEnum((int) DiceStatus);
      }
      if (NNLGFGFKGBE != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(NNLGFGFKGBE);
      }
      if (OPIIBFEJFHD != false) {
        output.WriteRawTag(104);
        output.WriteBool(OPIIBFEJFHD);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CheatTimes);
      }
      if (OJJHKDAKBGP != 0) {
        output.WriteRawTag(176, 29);
        output.WriteInt32(OJJHKDAKBGP);
      }
      if (CanRerollDice != false) {
        output.WriteRawTag(192, 31);
        output.WriteBool(CanRerollDice);
      }
      if (bDMBIDHFKJF_ != null) {
        output.WriteRawTag(218, 52);
        output.WriteMessage(BDMBIDHFKJF);
      }
      if (iPFCLBCNGAA_ != null) {
        output.WriteRawTag(202, 86);
        output.WriteMessage(IPFCLBCNGAA);
      }
      if (dice_ != null) {
        output.WriteRawTag(178, 94);
        output.WriteMessage(Dice);
      }
      aKMEEDBBDNI_.WriteTo(output, _repeated_aKMEEDBBDNI_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        output.WriteRawTag(8);
        output.WriteEnum((int) DiceType);
      }
      if (CurSurfaceId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurSurfaceId);
      }
      if (FLFAGDFGPMC != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(FLFAGDFGPMC);
      }
      if (RerollTimes != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(RerollTimes);
      }
      if (BranchId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BranchId);
      }
      if (CurSurfaceIndex != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CurSurfaceIndex);
      }
      if (CurBranchId != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CurBranchId);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        output.WriteRawTag(88);
        output.WriteEnum((int) DiceStatus);
      }
      if (NNLGFGFKGBE != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(NNLGFGFKGBE);
      }
      if (OPIIBFEJFHD != false) {
        output.WriteRawTag(104);
        output.WriteBool(OPIIBFEJFHD);
      }
      if (CheatTimes != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CheatTimes);
      }
      if (OJJHKDAKBGP != 0) {
        output.WriteRawTag(176, 29);
        output.WriteInt32(OJJHKDAKBGP);
      }
      if (CanRerollDice != false) {
        output.WriteRawTag(192, 31);
        output.WriteBool(CanRerollDice);
      }
      if (bDMBIDHFKJF_ != null) {
        output.WriteRawTag(218, 52);
        output.WriteMessage(BDMBIDHFKJF);
      }
      if (iPFCLBCNGAA_ != null) {
        output.WriteRawTag(202, 86);
        output.WriteMessage(IPFCLBCNGAA);
      }
      if (dice_ != null) {
        output.WriteRawTag(178, 94);
        output.WriteMessage(Dice);
      }
      aKMEEDBBDNI_.WriteTo(ref output, _repeated_aKMEEDBBDNI_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (RerollTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RerollTimes);
      }
      if (OPIIBFEJFHD != false) {
        size += 1 + 1;
      }
      if (NNLGFGFKGBE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NNLGFGFKGBE);
      }
      if (iPFCLBCNGAA_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(IPFCLBCNGAA);
      }
      if (dice_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Dice);
      }
      if (CurSurfaceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceIndex);
      }
      if (CanRerollDice != false) {
        size += 2 + 1;
      }
      if (CurSurfaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurSurfaceId);
      }
      if (CheatTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CheatTimes);
      }
      size += aKMEEDBBDNI_.CalculateSize(_repeated_aKMEEDBBDNI_codec);
      if (BranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BranchId);
      }
      if (bDMBIDHFKJF_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BDMBIDHFKJF);
      }
      if (DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceType);
      }
      if (OJJHKDAKBGP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OJJHKDAKBGP);
      }
      if (FLFAGDFGPMC != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FLFAGDFGPMC);
      }
      if (DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiceStatus);
      }
      if (CurBranchId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurBranchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ChessRogueDiceInfo other) {
      if (other == null) {
        return;
      }
      if (other.RerollTimes != 0) {
        RerollTimes = other.RerollTimes;
      }
      if (other.OPIIBFEJFHD != false) {
        OPIIBFEJFHD = other.OPIIBFEJFHD;
      }
      if (other.NNLGFGFKGBE != 0) {
        NNLGFGFKGBE = other.NNLGFGFKGBE;
      }
      if (other.iPFCLBCNGAA_ != null) {
        if (iPFCLBCNGAA_ == null) {
          IPFCLBCNGAA = new global::EggLink.DanhengServer.Proto.LNOPMPPABKJ();
        }
        IPFCLBCNGAA.MergeFrom(other.IPFCLBCNGAA);
      }
      if (other.dice_ != null) {
        if (dice_ == null) {
          Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
        }
        Dice.MergeFrom(other.Dice);
      }
      if (other.CurSurfaceIndex != 0) {
        CurSurfaceIndex = other.CurSurfaceIndex;
      }
      if (other.CanRerollDice != false) {
        CanRerollDice = other.CanRerollDice;
      }
      if (other.CurSurfaceId != 0) {
        CurSurfaceId = other.CurSurfaceId;
      }
      if (other.CheatTimes != 0) {
        CheatTimes = other.CheatTimes;
      }
      aKMEEDBBDNI_.Add(other.aKMEEDBBDNI_);
      if (other.BranchId != 0) {
        BranchId = other.BranchId;
      }
      if (other.bDMBIDHFKJF_ != null) {
        if (bDMBIDHFKJF_ == null) {
          BDMBIDHFKJF = new global::EggLink.DanhengServer.Proto.KEGPAIEJBGE();
        }
        BDMBIDHFKJF.MergeFrom(other.BDMBIDHFKJF);
      }
      if (other.DiceType != global::EggLink.DanhengServer.Proto.ChessRogueDiceType.ChessRogueDiceFixed) {
        DiceType = other.DiceType;
      }
      if (other.OJJHKDAKBGP != 0) {
        OJJHKDAKBGP = other.OJJHKDAKBGP;
      }
      if (other.FLFAGDFGPMC != 0) {
        FLFAGDFGPMC = other.FLFAGDFGPMC;
      }
      if (other.DiceStatus != global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus.ChessRogueDiceIdle) {
        DiceStatus = other.DiceStatus;
      }
      if (other.CurBranchId != 0) {
        CurBranchId = other.CurBranchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 24: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 40: {
            FLFAGDFGPMC = input.ReadUInt32();
            break;
          }
          case 48: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 64: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 72: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 80: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 88: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 96: {
            NNLGFGFKGBE = input.ReadUInt32();
            break;
          }
          case 104: {
            OPIIBFEJFHD = input.ReadBool();
            break;
          }
          case 112: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 3760: {
            OJJHKDAKBGP = input.ReadInt32();
            break;
          }
          case 4032: {
            CanRerollDice = input.ReadBool();
            break;
          }
          case 6746: {
            if (bDMBIDHFKJF_ == null) {
              BDMBIDHFKJF = new global::EggLink.DanhengServer.Proto.KEGPAIEJBGE();
            }
            input.ReadMessage(BDMBIDHFKJF);
            break;
          }
          case 11082: {
            if (iPFCLBCNGAA_ == null) {
              IPFCLBCNGAA = new global::EggLink.DanhengServer.Proto.LNOPMPPABKJ();
            }
            input.ReadMessage(IPFCLBCNGAA);
            break;
          }
          case 12082: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
          case 13410:
          case 13408: {
            aKMEEDBBDNI_.AddEntriesFrom(input, _repeated_aKMEEDBBDNI_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DiceType = (global::EggLink.DanhengServer.Proto.ChessRogueDiceType) input.ReadEnum();
            break;
          }
          case 24: {
            CurSurfaceId = input.ReadUInt32();
            break;
          }
          case 40: {
            FLFAGDFGPMC = input.ReadUInt32();
            break;
          }
          case 48: {
            RerollTimes = input.ReadUInt32();
            break;
          }
          case 64: {
            BranchId = input.ReadUInt32();
            break;
          }
          case 72: {
            CurSurfaceIndex = input.ReadUInt32();
            break;
          }
          case 80: {
            CurBranchId = input.ReadUInt32();
            break;
          }
          case 88: {
            DiceStatus = (global::EggLink.DanhengServer.Proto.ChessRogueDiceStatus) input.ReadEnum();
            break;
          }
          case 96: {
            NNLGFGFKGBE = input.ReadUInt32();
            break;
          }
          case 104: {
            OPIIBFEJFHD = input.ReadBool();
            break;
          }
          case 112: {
            CheatTimes = input.ReadUInt32();
            break;
          }
          case 3760: {
            OJJHKDAKBGP = input.ReadInt32();
            break;
          }
          case 4032: {
            CanRerollDice = input.ReadBool();
            break;
          }
          case 6746: {
            if (bDMBIDHFKJF_ == null) {
              BDMBIDHFKJF = new global::EggLink.DanhengServer.Proto.KEGPAIEJBGE();
            }
            input.ReadMessage(BDMBIDHFKJF);
            break;
          }
          case 11082: {
            if (iPFCLBCNGAA_ == null) {
              IPFCLBCNGAA = new global::EggLink.DanhengServer.Proto.LNOPMPPABKJ();
            }
            input.ReadMessage(IPFCLBCNGAA);
            break;
          }
          case 12082: {
            if (dice_ == null) {
              Dice = new global::EggLink.DanhengServer.Proto.ChessRogueDice();
            }
            input.ReadMessage(Dice);
            break;
          }
          case 13410:
          case 13408: {
            aKMEEDBBDNI_.AddEntriesFrom(ref input, _repeated_aKMEEDBBDNI_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
