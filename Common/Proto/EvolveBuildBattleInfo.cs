// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EvolveBuildBattleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from EvolveBuildBattleInfo.proto</summary>
  public static partial class EvolveBuildBattleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for EvolveBuildBattleInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EvolveBuildBattleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtFdm9sdmVCdWlsZEJhdHRsZUluZm8ucHJvdG8aEUhLR01CRktOT0tJLnBy",
            "b3RvGhFNRUxQTEFIS0FORy5wcm90bxoRSUxPRElMSkZQT0MucHJvdG8aH0V2",
            "b2x2ZUJ1aWxkR2VhckRhbWFnZUluZm8ucHJvdG8aEUlFSE9HT0FKRElBLnBy",
            "b3RvIqoFChVFdm9sdmVCdWlsZEJhdHRsZUluZm8SFAoMY3VyX2xldmVsX2lk",
            "GAEgASgNEhIKCmN1cl9wZXJpb2QYAiABKA0SEAoIY3VyX2NvaW4YAyABKA0S",
            "EQoJY3VyX3Njb3JlGAQgASgNEiYKEHdlYXBvbl9zbG90X2xpc3QYBSADKAsy",
            "DC5NRUxQTEFIS0FORxIpChNhY2Nlc3Nvcnlfc2xvdF9saXN0GAYgAygLMgwu",
            "TUVMUExBSEtBTkcSFQoNY3VyX2NhcmRfbGlzdBgHIAMoDRIVCg1iYW5fZ2Vh",
            "cl9saXN0GAggAygNEiAKCmNvbGxlY3Rpb24YCSABKAsyDC5JTE9ESUxKRlBP",
            "QxIZChFhbGxvd2VkX2dlYXJfbGlzdBgKIAMoDRIPCgdjdXJfZXhwGAsgASgN",
            "EhIKCmN1cl9yZXJvbGwYDCABKA0SHQoVY3VyX3RyZWFzdXJlX21pc3NfY250",
            "GA0gASgNEhYKDnBlcmlvZF9pZF9saXN0GA4gAygNEhkKEWN1cl9nZWFyX2xv",
            "c3RfY250GA8gASgNEhAKCGN1cl93YXZlGBAgASgNEh0KFWlzX3VubG9ja19n",
            "ZWFyX3Jlcm9sbBgRIAEoCBIaChJpc191bmxvY2tfZ2Vhcl9iYW4YEiABKAgS",
            "HwoJY2FyZF9saXN0GBMgAygLMgwuSEtHTUJGS05PS0kSNAoQZ2Vhcl9kYW1h",
            "Z2VfbGlzdBgUIAMoCzIaLkV2b2x2ZUJ1aWxkR2VhckRhbWFnZUluZm8SEwoL",
            "c3RhdF9wYXJhbXMYFSADKA0SEQoJaXNfZ2l2ZXVwGBYgASgIEhwKFGN1cl91",
            "bnVzZWRfcm91bmRfY250GBcgASgNEiMKDXN0YXRfbG9nX2luZm8YGCABKAsy",
            "DC5JRUhPR09BSkRJQUIeqgIbRWdnTGluay5EYW5oZW5nU2VydmVyLlByb3Rv",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.HKGMBFKNOKIReflection.Descriptor, global::EggLink.DanhengServer.Proto.MELPLAHKANGReflection.Descriptor, global::EggLink.DanhengServer.Proto.ILODILJFPOCReflection.Descriptor, global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfoReflection.Descriptor, global::EggLink.DanhengServer.Proto.IEHOGOAJDIAReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfo), global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfo.Parser, new[]{ "CurLevelId", "CurPeriod", "CurCoin", "CurScore", "WeaponSlotList", "AccessorySlotList", "CurCardList", "BanGearList", "Collection", "AllowedGearList", "CurExp", "CurReroll", "CurTreasureMissCnt", "PeriodIdList", "CurGearLostCnt", "CurWave", "IsUnlockGearReroll", "IsUnlockGearBan", "CardList", "GearDamageList", "StatParams", "IsGiveup", "CurUnusedRoundCnt", "StatLogInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EvolveBuildBattleInfo : pb::IMessage<EvolveBuildBattleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EvolveBuildBattleInfo> _parser = new pb::MessageParser<EvolveBuildBattleInfo>(() => new EvolveBuildBattleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EvolveBuildBattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo(EvolveBuildBattleInfo other) : this() {
      curLevelId_ = other.curLevelId_;
      curPeriod_ = other.curPeriod_;
      curCoin_ = other.curCoin_;
      curScore_ = other.curScore_;
      weaponSlotList_ = other.weaponSlotList_.Clone();
      accessorySlotList_ = other.accessorySlotList_.Clone();
      curCardList_ = other.curCardList_.Clone();
      banGearList_ = other.banGearList_.Clone();
      collection_ = other.collection_ != null ? other.collection_.Clone() : null;
      allowedGearList_ = other.allowedGearList_.Clone();
      curExp_ = other.curExp_;
      curReroll_ = other.curReroll_;
      curTreasureMissCnt_ = other.curTreasureMissCnt_;
      periodIdList_ = other.periodIdList_.Clone();
      curGearLostCnt_ = other.curGearLostCnt_;
      curWave_ = other.curWave_;
      isUnlockGearReroll_ = other.isUnlockGearReroll_;
      isUnlockGearBan_ = other.isUnlockGearBan_;
      cardList_ = other.cardList_.Clone();
      gearDamageList_ = other.gearDamageList_.Clone();
      statParams_ = other.statParams_.Clone();
      isGiveup_ = other.isGiveup_;
      curUnusedRoundCnt_ = other.curUnusedRoundCnt_;
      statLogInfo_ = other.statLogInfo_ != null ? other.statLogInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo Clone() {
      return new EvolveBuildBattleInfo(this);
    }

    /// <summary>Field number for the "cur_level_id" field.</summary>
    public const int CurLevelIdFieldNumber = 1;
    private uint curLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurLevelId {
      get { return curLevelId_; }
      set {
        curLevelId_ = value;
      }
    }

    /// <summary>Field number for the "cur_period" field.</summary>
    public const int CurPeriodFieldNumber = 2;
    private uint curPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurPeriod {
      get { return curPeriod_; }
      set {
        curPeriod_ = value;
      }
    }

    /// <summary>Field number for the "cur_coin" field.</summary>
    public const int CurCoinFieldNumber = 3;
    private uint curCoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurCoin {
      get { return curCoin_; }
      set {
        curCoin_ = value;
      }
    }

    /// <summary>Field number for the "cur_score" field.</summary>
    public const int CurScoreFieldNumber = 4;
    private uint curScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurScore {
      get { return curScore_; }
      set {
        curScore_ = value;
      }
    }

    /// <summary>Field number for the "weapon_slot_list" field.</summary>
    public const int WeaponSlotListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.MELPLAHKANG> _repeated_weaponSlotList_codec
        = pb::FieldCodec.ForMessage(42, global::EggLink.DanhengServer.Proto.MELPLAHKANG.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG> weaponSlotList_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG> WeaponSlotList {
      get { return weaponSlotList_; }
    }

    /// <summary>Field number for the "accessory_slot_list" field.</summary>
    public const int AccessorySlotListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.MELPLAHKANG> _repeated_accessorySlotList_codec
        = pb::FieldCodec.ForMessage(50, global::EggLink.DanhengServer.Proto.MELPLAHKANG.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG> accessorySlotList_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.MELPLAHKANG> AccessorySlotList {
      get { return accessorySlotList_; }
    }

    /// <summary>Field number for the "cur_card_list" field.</summary>
    public const int CurCardListFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_curCardList_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> curCardList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> CurCardList {
      get { return curCardList_; }
    }

    /// <summary>Field number for the "ban_gear_list" field.</summary>
    public const int BanGearListFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_banGearList_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> banGearList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> BanGearList {
      get { return banGearList_; }
    }

    /// <summary>Field number for the "collection" field.</summary>
    public const int CollectionFieldNumber = 9;
    private global::EggLink.DanhengServer.Proto.ILODILJFPOC collection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ILODILJFPOC Collection {
      get { return collection_; }
      set {
        collection_ = value;
      }
    }

    /// <summary>Field number for the "allowed_gear_list" field.</summary>
    public const int AllowedGearListFieldNumber = 10;
    private static readonly pb::FieldCodec<uint> _repeated_allowedGearList_codec
        = pb::FieldCodec.ForUInt32(82);
    private readonly pbc::RepeatedField<uint> allowedGearList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AllowedGearList {
      get { return allowedGearList_; }
    }

    /// <summary>Field number for the "cur_exp" field.</summary>
    public const int CurExpFieldNumber = 11;
    private uint curExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurExp {
      get { return curExp_; }
      set {
        curExp_ = value;
      }
    }

    /// <summary>Field number for the "cur_reroll" field.</summary>
    public const int CurRerollFieldNumber = 12;
    private uint curReroll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurReroll {
      get { return curReroll_; }
      set {
        curReroll_ = value;
      }
    }

    /// <summary>Field number for the "cur_treasure_miss_cnt" field.</summary>
    public const int CurTreasureMissCntFieldNumber = 13;
    private uint curTreasureMissCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurTreasureMissCnt {
      get { return curTreasureMissCnt_; }
      set {
        curTreasureMissCnt_ = value;
      }
    }

    /// <summary>Field number for the "period_id_list" field.</summary>
    public const int PeriodIdListFieldNumber = 14;
    private static readonly pb::FieldCodec<uint> _repeated_periodIdList_codec
        = pb::FieldCodec.ForUInt32(114);
    private readonly pbc::RepeatedField<uint> periodIdList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> PeriodIdList {
      get { return periodIdList_; }
    }

    /// <summary>Field number for the "cur_gear_lost_cnt" field.</summary>
    public const int CurGearLostCntFieldNumber = 15;
    private uint curGearLostCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurGearLostCnt {
      get { return curGearLostCnt_; }
      set {
        curGearLostCnt_ = value;
      }
    }

    /// <summary>Field number for the "cur_wave" field.</summary>
    public const int CurWaveFieldNumber = 16;
    private uint curWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurWave {
      get { return curWave_; }
      set {
        curWave_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock_gear_reroll" field.</summary>
    public const int IsUnlockGearRerollFieldNumber = 17;
    private bool isUnlockGearReroll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUnlockGearReroll {
      get { return isUnlockGearReroll_; }
      set {
        isUnlockGearReroll_ = value;
      }
    }

    /// <summary>Field number for the "is_unlock_gear_ban" field.</summary>
    public const int IsUnlockGearBanFieldNumber = 18;
    private bool isUnlockGearBan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUnlockGearBan {
      get { return isUnlockGearBan_; }
      set {
        isUnlockGearBan_ = value;
      }
    }

    /// <summary>Field number for the "card_list" field.</summary>
    public const int CardListFieldNumber = 19;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.HKGMBFKNOKI> _repeated_cardList_codec
        = pb::FieldCodec.ForMessage(154, global::EggLink.DanhengServer.Proto.HKGMBFKNOKI.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.HKGMBFKNOKI> cardList_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.HKGMBFKNOKI>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.HKGMBFKNOKI> CardList {
      get { return cardList_; }
    }

    /// <summary>Field number for the "gear_damage_list" field.</summary>
    public const int GearDamageListFieldNumber = 20;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> _repeated_gearDamageList_codec
        = pb::FieldCodec.ForMessage(162, global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> gearDamageList_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> GearDamageList {
      get { return gearDamageList_; }
    }

    /// <summary>Field number for the "stat_params" field.</summary>
    public const int StatParamsFieldNumber = 21;
    private static readonly pb::FieldCodec<uint> _repeated_statParams_codec
        = pb::FieldCodec.ForUInt32(170);
    private readonly pbc::RepeatedField<uint> statParams_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> StatParams {
      get { return statParams_; }
    }

    /// <summary>Field number for the "is_giveup" field.</summary>
    public const int IsGiveupFieldNumber = 22;
    private bool isGiveup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGiveup {
      get { return isGiveup_; }
      set {
        isGiveup_ = value;
      }
    }

    /// <summary>Field number for the "cur_unused_round_cnt" field.</summary>
    public const int CurUnusedRoundCntFieldNumber = 23;
    private uint curUnusedRoundCnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurUnusedRoundCnt {
      get { return curUnusedRoundCnt_; }
      set {
        curUnusedRoundCnt_ = value;
      }
    }

    /// <summary>Field number for the "stat_log_info" field.</summary>
    public const int StatLogInfoFieldNumber = 24;
    private global::EggLink.DanhengServer.Proto.IEHOGOAJDIA statLogInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.IEHOGOAJDIA StatLogInfo {
      get { return statLogInfo_; }
      set {
        statLogInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EvolveBuildBattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EvolveBuildBattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurLevelId != other.CurLevelId) return false;
      if (CurPeriod != other.CurPeriod) return false;
      if (CurCoin != other.CurCoin) return false;
      if (CurScore != other.CurScore) return false;
      if(!weaponSlotList_.Equals(other.weaponSlotList_)) return false;
      if(!accessorySlotList_.Equals(other.accessorySlotList_)) return false;
      if(!curCardList_.Equals(other.curCardList_)) return false;
      if(!banGearList_.Equals(other.banGearList_)) return false;
      if (!object.Equals(Collection, other.Collection)) return false;
      if(!allowedGearList_.Equals(other.allowedGearList_)) return false;
      if (CurExp != other.CurExp) return false;
      if (CurReroll != other.CurReroll) return false;
      if (CurTreasureMissCnt != other.CurTreasureMissCnt) return false;
      if(!periodIdList_.Equals(other.periodIdList_)) return false;
      if (CurGearLostCnt != other.CurGearLostCnt) return false;
      if (CurWave != other.CurWave) return false;
      if (IsUnlockGearReroll != other.IsUnlockGearReroll) return false;
      if (IsUnlockGearBan != other.IsUnlockGearBan) return false;
      if(!cardList_.Equals(other.cardList_)) return false;
      if(!gearDamageList_.Equals(other.gearDamageList_)) return false;
      if(!statParams_.Equals(other.statParams_)) return false;
      if (IsGiveup != other.IsGiveup) return false;
      if (CurUnusedRoundCnt != other.CurUnusedRoundCnt) return false;
      if (!object.Equals(StatLogInfo, other.StatLogInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CurLevelId != 0) hash ^= CurLevelId.GetHashCode();
      if (CurPeriod != 0) hash ^= CurPeriod.GetHashCode();
      if (CurCoin != 0) hash ^= CurCoin.GetHashCode();
      if (CurScore != 0) hash ^= CurScore.GetHashCode();
      hash ^= weaponSlotList_.GetHashCode();
      hash ^= accessorySlotList_.GetHashCode();
      hash ^= curCardList_.GetHashCode();
      hash ^= banGearList_.GetHashCode();
      if (collection_ != null) hash ^= Collection.GetHashCode();
      hash ^= allowedGearList_.GetHashCode();
      if (CurExp != 0) hash ^= CurExp.GetHashCode();
      if (CurReroll != 0) hash ^= CurReroll.GetHashCode();
      if (CurTreasureMissCnt != 0) hash ^= CurTreasureMissCnt.GetHashCode();
      hash ^= periodIdList_.GetHashCode();
      if (CurGearLostCnt != 0) hash ^= CurGearLostCnt.GetHashCode();
      if (CurWave != 0) hash ^= CurWave.GetHashCode();
      if (IsUnlockGearReroll != false) hash ^= IsUnlockGearReroll.GetHashCode();
      if (IsUnlockGearBan != false) hash ^= IsUnlockGearBan.GetHashCode();
      hash ^= cardList_.GetHashCode();
      hash ^= gearDamageList_.GetHashCode();
      hash ^= statParams_.GetHashCode();
      if (IsGiveup != false) hash ^= IsGiveup.GetHashCode();
      if (CurUnusedRoundCnt != 0) hash ^= CurUnusedRoundCnt.GetHashCode();
      if (statLogInfo_ != null) hash ^= StatLogInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurLevelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurLevelId);
      }
      if (CurPeriod != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurPeriod);
      }
      if (CurCoin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurCoin);
      }
      if (CurScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurScore);
      }
      weaponSlotList_.WriteTo(output, _repeated_weaponSlotList_codec);
      accessorySlotList_.WriteTo(output, _repeated_accessorySlotList_codec);
      curCardList_.WriteTo(output, _repeated_curCardList_codec);
      banGearList_.WriteTo(output, _repeated_banGearList_codec);
      if (collection_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Collection);
      }
      allowedGearList_.WriteTo(output, _repeated_allowedGearList_codec);
      if (CurExp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurExp);
      }
      if (CurReroll != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CurReroll);
      }
      if (CurTreasureMissCnt != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurTreasureMissCnt);
      }
      periodIdList_.WriteTo(output, _repeated_periodIdList_codec);
      if (CurGearLostCnt != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CurGearLostCnt);
      }
      if (CurWave != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CurWave);
      }
      if (IsUnlockGearReroll != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsUnlockGearReroll);
      }
      if (IsUnlockGearBan != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsUnlockGearBan);
      }
      cardList_.WriteTo(output, _repeated_cardList_codec);
      gearDamageList_.WriteTo(output, _repeated_gearDamageList_codec);
      statParams_.WriteTo(output, _repeated_statParams_codec);
      if (IsGiveup != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsGiveup);
      }
      if (CurUnusedRoundCnt != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(CurUnusedRoundCnt);
      }
      if (statLogInfo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(StatLogInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurLevelId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurLevelId);
      }
      if (CurPeriod != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurPeriod);
      }
      if (CurCoin != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurCoin);
      }
      if (CurScore != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CurScore);
      }
      weaponSlotList_.WriteTo(ref output, _repeated_weaponSlotList_codec);
      accessorySlotList_.WriteTo(ref output, _repeated_accessorySlotList_codec);
      curCardList_.WriteTo(ref output, _repeated_curCardList_codec);
      banGearList_.WriteTo(ref output, _repeated_banGearList_codec);
      if (collection_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Collection);
      }
      allowedGearList_.WriteTo(ref output, _repeated_allowedGearList_codec);
      if (CurExp != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurExp);
      }
      if (CurReroll != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CurReroll);
      }
      if (CurTreasureMissCnt != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurTreasureMissCnt);
      }
      periodIdList_.WriteTo(ref output, _repeated_periodIdList_codec);
      if (CurGearLostCnt != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(CurGearLostCnt);
      }
      if (CurWave != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CurWave);
      }
      if (IsUnlockGearReroll != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IsUnlockGearReroll);
      }
      if (IsUnlockGearBan != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(IsUnlockGearBan);
      }
      cardList_.WriteTo(ref output, _repeated_cardList_codec);
      gearDamageList_.WriteTo(ref output, _repeated_gearDamageList_codec);
      statParams_.WriteTo(ref output, _repeated_statParams_codec);
      if (IsGiveup != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(IsGiveup);
      }
      if (CurUnusedRoundCnt != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(CurUnusedRoundCnt);
      }
      if (statLogInfo_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(StatLogInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CurLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurLevelId);
      }
      if (CurPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurPeriod);
      }
      if (CurCoin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurCoin);
      }
      if (CurScore != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurScore);
      }
      size += weaponSlotList_.CalculateSize(_repeated_weaponSlotList_codec);
      size += accessorySlotList_.CalculateSize(_repeated_accessorySlotList_codec);
      size += curCardList_.CalculateSize(_repeated_curCardList_codec);
      size += banGearList_.CalculateSize(_repeated_banGearList_codec);
      if (collection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Collection);
      }
      size += allowedGearList_.CalculateSize(_repeated_allowedGearList_codec);
      if (CurExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurExp);
      }
      if (CurReroll != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurReroll);
      }
      if (CurTreasureMissCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurTreasureMissCnt);
      }
      size += periodIdList_.CalculateSize(_repeated_periodIdList_codec);
      if (CurGearLostCnt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurGearLostCnt);
      }
      if (CurWave != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurWave);
      }
      if (IsUnlockGearReroll != false) {
        size += 2 + 1;
      }
      if (IsUnlockGearBan != false) {
        size += 2 + 1;
      }
      size += cardList_.CalculateSize(_repeated_cardList_codec);
      size += gearDamageList_.CalculateSize(_repeated_gearDamageList_codec);
      size += statParams_.CalculateSize(_repeated_statParams_codec);
      if (IsGiveup != false) {
        size += 2 + 1;
      }
      if (CurUnusedRoundCnt != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurUnusedRoundCnt);
      }
      if (statLogInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatLogInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EvolveBuildBattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurLevelId != 0) {
        CurLevelId = other.CurLevelId;
      }
      if (other.CurPeriod != 0) {
        CurPeriod = other.CurPeriod;
      }
      if (other.CurCoin != 0) {
        CurCoin = other.CurCoin;
      }
      if (other.CurScore != 0) {
        CurScore = other.CurScore;
      }
      weaponSlotList_.Add(other.weaponSlotList_);
      accessorySlotList_.Add(other.accessorySlotList_);
      curCardList_.Add(other.curCardList_);
      banGearList_.Add(other.banGearList_);
      if (other.collection_ != null) {
        if (collection_ == null) {
          Collection = new global::EggLink.DanhengServer.Proto.ILODILJFPOC();
        }
        Collection.MergeFrom(other.Collection);
      }
      allowedGearList_.Add(other.allowedGearList_);
      if (other.CurExp != 0) {
        CurExp = other.CurExp;
      }
      if (other.CurReroll != 0) {
        CurReroll = other.CurReroll;
      }
      if (other.CurTreasureMissCnt != 0) {
        CurTreasureMissCnt = other.CurTreasureMissCnt;
      }
      periodIdList_.Add(other.periodIdList_);
      if (other.CurGearLostCnt != 0) {
        CurGearLostCnt = other.CurGearLostCnt;
      }
      if (other.CurWave != 0) {
        CurWave = other.CurWave;
      }
      if (other.IsUnlockGearReroll != false) {
        IsUnlockGearReroll = other.IsUnlockGearReroll;
      }
      if (other.IsUnlockGearBan != false) {
        IsUnlockGearBan = other.IsUnlockGearBan;
      }
      cardList_.Add(other.cardList_);
      gearDamageList_.Add(other.gearDamageList_);
      statParams_.Add(other.statParams_);
      if (other.IsGiveup != false) {
        IsGiveup = other.IsGiveup;
      }
      if (other.CurUnusedRoundCnt != 0) {
        CurUnusedRoundCnt = other.CurUnusedRoundCnt;
      }
      if (other.statLogInfo_ != null) {
        if (statLogInfo_ == null) {
          StatLogInfo = new global::EggLink.DanhengServer.Proto.IEHOGOAJDIA();
        }
        StatLogInfo.MergeFrom(other.StatLogInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurLevelId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurPeriod = input.ReadUInt32();
            break;
          }
          case 24: {
            CurCoin = input.ReadUInt32();
            break;
          }
          case 32: {
            CurScore = input.ReadUInt32();
            break;
          }
          case 42: {
            weaponSlotList_.AddEntriesFrom(input, _repeated_weaponSlotList_codec);
            break;
          }
          case 50: {
            accessorySlotList_.AddEntriesFrom(input, _repeated_accessorySlotList_codec);
            break;
          }
          case 58:
          case 56: {
            curCardList_.AddEntriesFrom(input, _repeated_curCardList_codec);
            break;
          }
          case 66:
          case 64: {
            banGearList_.AddEntriesFrom(input, _repeated_banGearList_codec);
            break;
          }
          case 74: {
            if (collection_ == null) {
              Collection = new global::EggLink.DanhengServer.Proto.ILODILJFPOC();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 82:
          case 80: {
            allowedGearList_.AddEntriesFrom(input, _repeated_allowedGearList_codec);
            break;
          }
          case 88: {
            CurExp = input.ReadUInt32();
            break;
          }
          case 96: {
            CurReroll = input.ReadUInt32();
            break;
          }
          case 104: {
            CurTreasureMissCnt = input.ReadUInt32();
            break;
          }
          case 114:
          case 112: {
            periodIdList_.AddEntriesFrom(input, _repeated_periodIdList_codec);
            break;
          }
          case 120: {
            CurGearLostCnt = input.ReadUInt32();
            break;
          }
          case 128: {
            CurWave = input.ReadUInt32();
            break;
          }
          case 136: {
            IsUnlockGearReroll = input.ReadBool();
            break;
          }
          case 144: {
            IsUnlockGearBan = input.ReadBool();
            break;
          }
          case 154: {
            cardList_.AddEntriesFrom(input, _repeated_cardList_codec);
            break;
          }
          case 162: {
            gearDamageList_.AddEntriesFrom(input, _repeated_gearDamageList_codec);
            break;
          }
          case 170:
          case 168: {
            statParams_.AddEntriesFrom(input, _repeated_statParams_codec);
            break;
          }
          case 176: {
            IsGiveup = input.ReadBool();
            break;
          }
          case 184: {
            CurUnusedRoundCnt = input.ReadUInt32();
            break;
          }
          case 194: {
            if (statLogInfo_ == null) {
              StatLogInfo = new global::EggLink.DanhengServer.Proto.IEHOGOAJDIA();
            }
            input.ReadMessage(StatLogInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurLevelId = input.ReadUInt32();
            break;
          }
          case 16: {
            CurPeriod = input.ReadUInt32();
            break;
          }
          case 24: {
            CurCoin = input.ReadUInt32();
            break;
          }
          case 32: {
            CurScore = input.ReadUInt32();
            break;
          }
          case 42: {
            weaponSlotList_.AddEntriesFrom(ref input, _repeated_weaponSlotList_codec);
            break;
          }
          case 50: {
            accessorySlotList_.AddEntriesFrom(ref input, _repeated_accessorySlotList_codec);
            break;
          }
          case 58:
          case 56: {
            curCardList_.AddEntriesFrom(ref input, _repeated_curCardList_codec);
            break;
          }
          case 66:
          case 64: {
            banGearList_.AddEntriesFrom(ref input, _repeated_banGearList_codec);
            break;
          }
          case 74: {
            if (collection_ == null) {
              Collection = new global::EggLink.DanhengServer.Proto.ILODILJFPOC();
            }
            input.ReadMessage(Collection);
            break;
          }
          case 82:
          case 80: {
            allowedGearList_.AddEntriesFrom(ref input, _repeated_allowedGearList_codec);
            break;
          }
          case 88: {
            CurExp = input.ReadUInt32();
            break;
          }
          case 96: {
            CurReroll = input.ReadUInt32();
            break;
          }
          case 104: {
            CurTreasureMissCnt = input.ReadUInt32();
            break;
          }
          case 114:
          case 112: {
            periodIdList_.AddEntriesFrom(ref input, _repeated_periodIdList_codec);
            break;
          }
          case 120: {
            CurGearLostCnt = input.ReadUInt32();
            break;
          }
          case 128: {
            CurWave = input.ReadUInt32();
            break;
          }
          case 136: {
            IsUnlockGearReroll = input.ReadBool();
            break;
          }
          case 144: {
            IsUnlockGearBan = input.ReadBool();
            break;
          }
          case 154: {
            cardList_.AddEntriesFrom(ref input, _repeated_cardList_codec);
            break;
          }
          case 162: {
            gearDamageList_.AddEntriesFrom(ref input, _repeated_gearDamageList_codec);
            break;
          }
          case 170:
          case 168: {
            statParams_.AddEntriesFrom(ref input, _repeated_statParams_codec);
            break;
          }
          case 176: {
            IsGiveup = input.ReadBool();
            break;
          }
          case 184: {
            CurUnusedRoundCnt = input.ReadUInt32();
            break;
          }
          case 194: {
            if (statLogInfo_ == null) {
              StatLogInfo = new global::EggLink.DanhengServer.Proto.IEHOGOAJDIA();
            }
            input.ReadMessage(StatLogInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
