// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EvolveBuildBattleInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EggLink.DanhengServer.Proto {

  /// <summary>Holder for reflection information generated from EvolveBuildBattleInfo.proto</summary>
  public static partial class EvolveBuildBattleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for EvolveBuildBattleInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EvolveBuildBattleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtFdm9sdmVCdWlsZEJhdHRsZUluZm8ucHJvdG8aEU1MRElCRE9GSkZOLnBy",
            "b3RvGhFFQ0RJSUtDTU9KTy5wcm90bxoRQkxBQkhGTElNSUgucHJvdG8aH0V2",
            "b2x2ZUJ1aWxkR2VhckRhbWFnZUluZm8ucHJvdG8aEURMQ0tFR1BITE9JLnBy",
            "b3RvIvUGChVFdm9sdmVCdWlsZEJhdHRsZUluZm8SHQoVQ3VyTGV2ZWxJZEZp",
            "ZWxkTnVtYmVyGAEgASgNEhwKFEN1clBlcmlvZEZpZWxkTnVtYmVyGAIgASgN",
            "EhoKEkN1ckNvaW5GaWVsZE51bWJlchgDIAEoDRIvChlXZWFwb25TbG90TGlz",
            "dEZpZWxkTnVtYmVyGAQgAygLMgwuRExDS0VHUEhMT0kSMgocQWNjZXNzb3J5",
            "U2xvdExpc3RGaWVsZE51bWJlchgFIAMoCzIMLkRMQ0tFR1BITE9JEh4KFkJh",
            "bkdlYXJMaXN0RmllbGROdW1iZXIYBiADKA0SKwoVQ29sbGVjdGlvbkZpZWxk",
            "TnVtYmVyGAcgASgLMgwuTUxESUJET0ZKRk4SIgoaQWxsb3dlZEdlYXJMaXN0",
            "RmllbGROdW1iZXIYCCADKA0SGQoRQ3VyRXhwRmllbGROdW1iZXIYCSABKA0S",
            "HAoUQ3VyUmVyb2xsRmllbGROdW1iZXIYCiABKA0SJQodQ3VyVHJlYXN1cmVN",
            "aXNzQ250RmllbGROdW1iZXIYCyABKA0SHwoXUGVyaW9kSWRMaXN0RmllbGRO",
            "dW1iZXIYDCADKA0SIQoZQ3VyR2Vhckxvc3RDbnRGaWVsZE51bWJlchgNIAEo",
            "DRIaChJDdXJXYXZlRmllbGROdW1iZXIYDiABKA0SJQodSXNVbmxvY2tHZWFy",
            "UmVyb2xsRmllbGROdW1iZXIYDyABKAgSIgoaSXNVbmxvY2tHZWFyQmFuRmll",
            "bGROdW1iZXIYECABKAgSKQoTQ2FyZExpc3RGaWVsZE51bWJlchgRIAMoCzIM",
            "LkJMQUJIRkxJTUlIEj0KGUdlYXJEYW1hZ2VMaXN0RmllbGROdW1iZXIYEiAD",
            "KAsyGi5Fdm9sdmVCdWlsZEdlYXJEYW1hZ2VJbmZvEh0KFVN0YXRQYXJhbXNG",
            "aWVsZE51bWJlchgTIAMoDRIbChNJc0dpdmV1cEZpZWxkTnVtYmVyGBQgASgI",
            "EiQKHEN1clVudXNlZFJvdW5kQ250RmllbGROdW1iZXIYFSABKA0SLAoWU3Rh",
            "dExvZ0luZm9GaWVsZE51bWJlchgWIAEoCzIMLkVDRElJS0NNT0pPEigKIFBl",
            "cmlvZEZpcnN0UmFuZG9tU2VlZEZpZWxkTnVtYmVyGBcgASgNQh6qAhtFZ2dM",
            "aW5rLkRhbmhlbmdTZXJ2ZXIuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::EggLink.DanhengServer.Proto.MLDIBDOFJFNReflection.Descriptor, global::EggLink.DanhengServer.Proto.ECDIIKCMOJOReflection.Descriptor, global::EggLink.DanhengServer.Proto.BLABHFLIMIHReflection.Descriptor, global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfoReflection.Descriptor, global::EggLink.DanhengServer.Proto.DLCKEGPHLOIReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfo), global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfo.Parser, new[]{ "CurLevelIdFieldNumber", "CurPeriodFieldNumber", "CurCoinFieldNumber", "WeaponSlotListFieldNumber", "AccessorySlotListFieldNumber", "BanGearListFieldNumber", "CollectionFieldNumber", "AllowedGearListFieldNumber", "CurExpFieldNumber", "CurRerollFieldNumber", "CurTreasureMissCntFieldNumber", "PeriodIdListFieldNumber", "CurGearLostCntFieldNumber", "CurWaveFieldNumber", "IsUnlockGearRerollFieldNumber", "IsUnlockGearBanFieldNumber", "CardListFieldNumber", "GearDamageListFieldNumber", "StatParamsFieldNumber", "IsGiveupFieldNumber", "CurUnusedRoundCntFieldNumber", "StatLogInfoFieldNumber", "PeriodFirstRandomSeedFieldNumber" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EvolveBuildBattleInfo : pb::IMessage<EvolveBuildBattleInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EvolveBuildBattleInfo> _parser = new pb::MessageParser<EvolveBuildBattleInfo>(() => new EvolveBuildBattleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EvolveBuildBattleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EggLink.DanhengServer.Proto.EvolveBuildBattleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo(EvolveBuildBattleInfo other) : this() {
      curLevelIdFieldNumber_ = other.curLevelIdFieldNumber_;
      curPeriodFieldNumber_ = other.curPeriodFieldNumber_;
      curCoinFieldNumber_ = other.curCoinFieldNumber_;
      weaponSlotListFieldNumber_ = other.weaponSlotListFieldNumber_.Clone();
      accessorySlotListFieldNumber_ = other.accessorySlotListFieldNumber_.Clone();
      banGearListFieldNumber_ = other.banGearListFieldNumber_.Clone();
      collectionFieldNumber_ = other.collectionFieldNumber_ != null ? other.collectionFieldNumber_.Clone() : null;
      allowedGearListFieldNumber_ = other.allowedGearListFieldNumber_.Clone();
      curExpFieldNumber_ = other.curExpFieldNumber_;
      curRerollFieldNumber_ = other.curRerollFieldNumber_;
      curTreasureMissCntFieldNumber_ = other.curTreasureMissCntFieldNumber_;
      periodIdListFieldNumber_ = other.periodIdListFieldNumber_.Clone();
      curGearLostCntFieldNumber_ = other.curGearLostCntFieldNumber_;
      curWaveFieldNumber_ = other.curWaveFieldNumber_;
      isUnlockGearRerollFieldNumber_ = other.isUnlockGearRerollFieldNumber_;
      isUnlockGearBanFieldNumber_ = other.isUnlockGearBanFieldNumber_;
      cardListFieldNumber_ = other.cardListFieldNumber_.Clone();
      gearDamageListFieldNumber_ = other.gearDamageListFieldNumber_.Clone();
      statParamsFieldNumber_ = other.statParamsFieldNumber_.Clone();
      isGiveupFieldNumber_ = other.isGiveupFieldNumber_;
      curUnusedRoundCntFieldNumber_ = other.curUnusedRoundCntFieldNumber_;
      statLogInfoFieldNumber_ = other.statLogInfoFieldNumber_ != null ? other.statLogInfoFieldNumber_.Clone() : null;
      periodFirstRandomSeedFieldNumber_ = other.periodFirstRandomSeedFieldNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EvolveBuildBattleInfo Clone() {
      return new EvolveBuildBattleInfo(this);
    }

    /// <summary>Field number for the "CurLevelIdFieldNumber" field.</summary>
    public const int CurLevelIdFieldNumberFieldNumber = 1;
    private uint curLevelIdFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurLevelIdFieldNumber {
      get { return curLevelIdFieldNumber_; }
      set {
        curLevelIdFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurPeriodFieldNumber" field.</summary>
    public const int CurPeriodFieldNumberFieldNumber = 2;
    private uint curPeriodFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurPeriodFieldNumber {
      get { return curPeriodFieldNumber_; }
      set {
        curPeriodFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurCoinFieldNumber" field.</summary>
    public const int CurCoinFieldNumberFieldNumber = 3;
    private uint curCoinFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurCoinFieldNumber {
      get { return curCoinFieldNumber_; }
      set {
        curCoinFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "WeaponSlotListFieldNumber" field.</summary>
    public const int WeaponSlotListFieldNumberFieldNumber = 4;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> _repeated_weaponSlotListFieldNumber_codec
        = pb::FieldCodec.ForMessage(34, global::EggLink.DanhengServer.Proto.DLCKEGPHLOI.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> weaponSlotListFieldNumber_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> WeaponSlotListFieldNumber {
      get { return weaponSlotListFieldNumber_; }
    }

    /// <summary>Field number for the "AccessorySlotListFieldNumber" field.</summary>
    public const int AccessorySlotListFieldNumberFieldNumber = 5;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> _repeated_accessorySlotListFieldNumber_codec
        = pb::FieldCodec.ForMessage(42, global::EggLink.DanhengServer.Proto.DLCKEGPHLOI.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> accessorySlotListFieldNumber_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.DLCKEGPHLOI> AccessorySlotListFieldNumber {
      get { return accessorySlotListFieldNumber_; }
    }

    /// <summary>Field number for the "BanGearListFieldNumber" field.</summary>
    public const int BanGearListFieldNumberFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_banGearListFieldNumber_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> banGearListFieldNumber_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> BanGearListFieldNumber {
      get { return banGearListFieldNumber_; }
    }

    /// <summary>Field number for the "CollectionFieldNumber" field.</summary>
    public const int CollectionFieldNumberFieldNumber = 7;
    private global::EggLink.DanhengServer.Proto.MLDIBDOFJFN collectionFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.MLDIBDOFJFN CollectionFieldNumber {
      get { return collectionFieldNumber_; }
      set {
        collectionFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "AllowedGearListFieldNumber" field.</summary>
    public const int AllowedGearListFieldNumberFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_allowedGearListFieldNumber_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> allowedGearListFieldNumber_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> AllowedGearListFieldNumber {
      get { return allowedGearListFieldNumber_; }
    }

    /// <summary>Field number for the "CurExpFieldNumber" field.</summary>
    public const int CurExpFieldNumberFieldNumber = 9;
    private uint curExpFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurExpFieldNumber {
      get { return curExpFieldNumber_; }
      set {
        curExpFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurRerollFieldNumber" field.</summary>
    public const int CurRerollFieldNumberFieldNumber = 10;
    private uint curRerollFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurRerollFieldNumber {
      get { return curRerollFieldNumber_; }
      set {
        curRerollFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurTreasureMissCntFieldNumber" field.</summary>
    public const int CurTreasureMissCntFieldNumberFieldNumber = 11;
    private uint curTreasureMissCntFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurTreasureMissCntFieldNumber {
      get { return curTreasureMissCntFieldNumber_; }
      set {
        curTreasureMissCntFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "PeriodIdListFieldNumber" field.</summary>
    public const int PeriodIdListFieldNumberFieldNumber = 12;
    private static readonly pb::FieldCodec<uint> _repeated_periodIdListFieldNumber_codec
        = pb::FieldCodec.ForUInt32(98);
    private readonly pbc::RepeatedField<uint> periodIdListFieldNumber_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> PeriodIdListFieldNumber {
      get { return periodIdListFieldNumber_; }
    }

    /// <summary>Field number for the "CurGearLostCntFieldNumber" field.</summary>
    public const int CurGearLostCntFieldNumberFieldNumber = 13;
    private uint curGearLostCntFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurGearLostCntFieldNumber {
      get { return curGearLostCntFieldNumber_; }
      set {
        curGearLostCntFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurWaveFieldNumber" field.</summary>
    public const int CurWaveFieldNumberFieldNumber = 14;
    private uint curWaveFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurWaveFieldNumber {
      get { return curWaveFieldNumber_; }
      set {
        curWaveFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "IsUnlockGearRerollFieldNumber" field.</summary>
    public const int IsUnlockGearRerollFieldNumberFieldNumber = 15;
    private bool isUnlockGearRerollFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUnlockGearRerollFieldNumber {
      get { return isUnlockGearRerollFieldNumber_; }
      set {
        isUnlockGearRerollFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "IsUnlockGearBanFieldNumber" field.</summary>
    public const int IsUnlockGearBanFieldNumberFieldNumber = 16;
    private bool isUnlockGearBanFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsUnlockGearBanFieldNumber {
      get { return isUnlockGearBanFieldNumber_; }
      set {
        isUnlockGearBanFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CardListFieldNumber" field.</summary>
    public const int CardListFieldNumberFieldNumber = 17;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.BLABHFLIMIH> _repeated_cardListFieldNumber_codec
        = pb::FieldCodec.ForMessage(138, global::EggLink.DanhengServer.Proto.BLABHFLIMIH.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.BLABHFLIMIH> cardListFieldNumber_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.BLABHFLIMIH>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.BLABHFLIMIH> CardListFieldNumber {
      get { return cardListFieldNumber_; }
    }

    /// <summary>Field number for the "GearDamageListFieldNumber" field.</summary>
    public const int GearDamageListFieldNumberFieldNumber = 18;
    private static readonly pb::FieldCodec<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> _repeated_gearDamageListFieldNumber_codec
        = pb::FieldCodec.ForMessage(146, global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo.Parser);
    private readonly pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> gearDamageListFieldNumber_ = new pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::EggLink.DanhengServer.Proto.EvolveBuildGearDamageInfo> GearDamageListFieldNumber {
      get { return gearDamageListFieldNumber_; }
    }

    /// <summary>Field number for the "StatParamsFieldNumber" field.</summary>
    public const int StatParamsFieldNumberFieldNumber = 19;
    private static readonly pb::FieldCodec<uint> _repeated_statParamsFieldNumber_codec
        = pb::FieldCodec.ForUInt32(154);
    private readonly pbc::RepeatedField<uint> statParamsFieldNumber_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> StatParamsFieldNumber {
      get { return statParamsFieldNumber_; }
    }

    /// <summary>Field number for the "IsGiveupFieldNumber" field.</summary>
    public const int IsGiveupFieldNumberFieldNumber = 20;
    private bool isGiveupFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsGiveupFieldNumber {
      get { return isGiveupFieldNumber_; }
      set {
        isGiveupFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "CurUnusedRoundCntFieldNumber" field.</summary>
    public const int CurUnusedRoundCntFieldNumberFieldNumber = 21;
    private uint curUnusedRoundCntFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CurUnusedRoundCntFieldNumber {
      get { return curUnusedRoundCntFieldNumber_; }
      set {
        curUnusedRoundCntFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "StatLogInfoFieldNumber" field.</summary>
    public const int StatLogInfoFieldNumberFieldNumber = 22;
    private global::EggLink.DanhengServer.Proto.ECDIIKCMOJO statLogInfoFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::EggLink.DanhengServer.Proto.ECDIIKCMOJO StatLogInfoFieldNumber {
      get { return statLogInfoFieldNumber_; }
      set {
        statLogInfoFieldNumber_ = value;
      }
    }

    /// <summary>Field number for the "PeriodFirstRandomSeedFieldNumber" field.</summary>
    public const int PeriodFirstRandomSeedFieldNumberFieldNumber = 23;
    private uint periodFirstRandomSeedFieldNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PeriodFirstRandomSeedFieldNumber {
      get { return periodFirstRandomSeedFieldNumber_; }
      set {
        periodFirstRandomSeedFieldNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EvolveBuildBattleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EvolveBuildBattleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurLevelIdFieldNumber != other.CurLevelIdFieldNumber) return false;
      if (CurPeriodFieldNumber != other.CurPeriodFieldNumber) return false;
      if (CurCoinFieldNumber != other.CurCoinFieldNumber) return false;
      if(!weaponSlotListFieldNumber_.Equals(other.weaponSlotListFieldNumber_)) return false;
      if(!accessorySlotListFieldNumber_.Equals(other.accessorySlotListFieldNumber_)) return false;
      if(!banGearListFieldNumber_.Equals(other.banGearListFieldNumber_)) return false;
      if (!object.Equals(CollectionFieldNumber, other.CollectionFieldNumber)) return false;
      if(!allowedGearListFieldNumber_.Equals(other.allowedGearListFieldNumber_)) return false;
      if (CurExpFieldNumber != other.CurExpFieldNumber) return false;
      if (CurRerollFieldNumber != other.CurRerollFieldNumber) return false;
      if (CurTreasureMissCntFieldNumber != other.CurTreasureMissCntFieldNumber) return false;
      if(!periodIdListFieldNumber_.Equals(other.periodIdListFieldNumber_)) return false;
      if (CurGearLostCntFieldNumber != other.CurGearLostCntFieldNumber) return false;
      if (CurWaveFieldNumber != other.CurWaveFieldNumber) return false;
      if (IsUnlockGearRerollFieldNumber != other.IsUnlockGearRerollFieldNumber) return false;
      if (IsUnlockGearBanFieldNumber != other.IsUnlockGearBanFieldNumber) return false;
      if(!cardListFieldNumber_.Equals(other.cardListFieldNumber_)) return false;
      if(!gearDamageListFieldNumber_.Equals(other.gearDamageListFieldNumber_)) return false;
      if(!statParamsFieldNumber_.Equals(other.statParamsFieldNumber_)) return false;
      if (IsGiveupFieldNumber != other.IsGiveupFieldNumber) return false;
      if (CurUnusedRoundCntFieldNumber != other.CurUnusedRoundCntFieldNumber) return false;
      if (!object.Equals(StatLogInfoFieldNumber, other.StatLogInfoFieldNumber)) return false;
      if (PeriodFirstRandomSeedFieldNumber != other.PeriodFirstRandomSeedFieldNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (CurLevelIdFieldNumber != 0) hash ^= CurLevelIdFieldNumber.GetHashCode();
      if (CurPeriodFieldNumber != 0) hash ^= CurPeriodFieldNumber.GetHashCode();
      if (CurCoinFieldNumber != 0) hash ^= CurCoinFieldNumber.GetHashCode();
      hash ^= weaponSlotListFieldNumber_.GetHashCode();
      hash ^= accessorySlotListFieldNumber_.GetHashCode();
      hash ^= banGearListFieldNumber_.GetHashCode();
      if (collectionFieldNumber_ != null) hash ^= CollectionFieldNumber.GetHashCode();
      hash ^= allowedGearListFieldNumber_.GetHashCode();
      if (CurExpFieldNumber != 0) hash ^= CurExpFieldNumber.GetHashCode();
      if (CurRerollFieldNumber != 0) hash ^= CurRerollFieldNumber.GetHashCode();
      if (CurTreasureMissCntFieldNumber != 0) hash ^= CurTreasureMissCntFieldNumber.GetHashCode();
      hash ^= periodIdListFieldNumber_.GetHashCode();
      if (CurGearLostCntFieldNumber != 0) hash ^= CurGearLostCntFieldNumber.GetHashCode();
      if (CurWaveFieldNumber != 0) hash ^= CurWaveFieldNumber.GetHashCode();
      if (IsUnlockGearRerollFieldNumber != false) hash ^= IsUnlockGearRerollFieldNumber.GetHashCode();
      if (IsUnlockGearBanFieldNumber != false) hash ^= IsUnlockGearBanFieldNumber.GetHashCode();
      hash ^= cardListFieldNumber_.GetHashCode();
      hash ^= gearDamageListFieldNumber_.GetHashCode();
      hash ^= statParamsFieldNumber_.GetHashCode();
      if (IsGiveupFieldNumber != false) hash ^= IsGiveupFieldNumber.GetHashCode();
      if (CurUnusedRoundCntFieldNumber != 0) hash ^= CurUnusedRoundCntFieldNumber.GetHashCode();
      if (statLogInfoFieldNumber_ != null) hash ^= StatLogInfoFieldNumber.GetHashCode();
      if (PeriodFirstRandomSeedFieldNumber != 0) hash ^= PeriodFirstRandomSeedFieldNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CurLevelIdFieldNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurLevelIdFieldNumber);
      }
      if (CurPeriodFieldNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurPeriodFieldNumber);
      }
      if (CurCoinFieldNumber != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurCoinFieldNumber);
      }
      weaponSlotListFieldNumber_.WriteTo(output, _repeated_weaponSlotListFieldNumber_codec);
      accessorySlotListFieldNumber_.WriteTo(output, _repeated_accessorySlotListFieldNumber_codec);
      banGearListFieldNumber_.WriteTo(output, _repeated_banGearListFieldNumber_codec);
      if (collectionFieldNumber_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CollectionFieldNumber);
      }
      allowedGearListFieldNumber_.WriteTo(output, _repeated_allowedGearListFieldNumber_codec);
      if (CurExpFieldNumber != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CurExpFieldNumber);
      }
      if (CurRerollFieldNumber != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CurRerollFieldNumber);
      }
      if (CurTreasureMissCntFieldNumber != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurTreasureMissCntFieldNumber);
      }
      periodIdListFieldNumber_.WriteTo(output, _repeated_periodIdListFieldNumber_codec);
      if (CurGearLostCntFieldNumber != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurGearLostCntFieldNumber);
      }
      if (CurWaveFieldNumber != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CurWaveFieldNumber);
      }
      if (IsUnlockGearRerollFieldNumber != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsUnlockGearRerollFieldNumber);
      }
      if (IsUnlockGearBanFieldNumber != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsUnlockGearBanFieldNumber);
      }
      cardListFieldNumber_.WriteTo(output, _repeated_cardListFieldNumber_codec);
      gearDamageListFieldNumber_.WriteTo(output, _repeated_gearDamageListFieldNumber_codec);
      statParamsFieldNumber_.WriteTo(output, _repeated_statParamsFieldNumber_codec);
      if (IsGiveupFieldNumber != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsGiveupFieldNumber);
      }
      if (CurUnusedRoundCntFieldNumber != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(CurUnusedRoundCntFieldNumber);
      }
      if (statLogInfoFieldNumber_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(StatLogInfoFieldNumber);
      }
      if (PeriodFirstRandomSeedFieldNumber != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PeriodFirstRandomSeedFieldNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CurLevelIdFieldNumber != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CurLevelIdFieldNumber);
      }
      if (CurPeriodFieldNumber != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CurPeriodFieldNumber);
      }
      if (CurCoinFieldNumber != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CurCoinFieldNumber);
      }
      weaponSlotListFieldNumber_.WriteTo(ref output, _repeated_weaponSlotListFieldNumber_codec);
      accessorySlotListFieldNumber_.WriteTo(ref output, _repeated_accessorySlotListFieldNumber_codec);
      banGearListFieldNumber_.WriteTo(ref output, _repeated_banGearListFieldNumber_codec);
      if (collectionFieldNumber_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CollectionFieldNumber);
      }
      allowedGearListFieldNumber_.WriteTo(ref output, _repeated_allowedGearListFieldNumber_codec);
      if (CurExpFieldNumber != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(CurExpFieldNumber);
      }
      if (CurRerollFieldNumber != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CurRerollFieldNumber);
      }
      if (CurTreasureMissCntFieldNumber != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CurTreasureMissCntFieldNumber);
      }
      periodIdListFieldNumber_.WriteTo(ref output, _repeated_periodIdListFieldNumber_codec);
      if (CurGearLostCntFieldNumber != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(CurGearLostCntFieldNumber);
      }
      if (CurWaveFieldNumber != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(CurWaveFieldNumber);
      }
      if (IsUnlockGearRerollFieldNumber != false) {
        output.WriteRawTag(120);
        output.WriteBool(IsUnlockGearRerollFieldNumber);
      }
      if (IsUnlockGearBanFieldNumber != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsUnlockGearBanFieldNumber);
      }
      cardListFieldNumber_.WriteTo(ref output, _repeated_cardListFieldNumber_codec);
      gearDamageListFieldNumber_.WriteTo(ref output, _repeated_gearDamageListFieldNumber_codec);
      statParamsFieldNumber_.WriteTo(ref output, _repeated_statParamsFieldNumber_codec);
      if (IsGiveupFieldNumber != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(IsGiveupFieldNumber);
      }
      if (CurUnusedRoundCntFieldNumber != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(CurUnusedRoundCntFieldNumber);
      }
      if (statLogInfoFieldNumber_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(StatLogInfoFieldNumber);
      }
      if (PeriodFirstRandomSeedFieldNumber != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(PeriodFirstRandomSeedFieldNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (CurLevelIdFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurLevelIdFieldNumber);
      }
      if (CurPeriodFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurPeriodFieldNumber);
      }
      if (CurCoinFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurCoinFieldNumber);
      }
      size += weaponSlotListFieldNumber_.CalculateSize(_repeated_weaponSlotListFieldNumber_codec);
      size += accessorySlotListFieldNumber_.CalculateSize(_repeated_accessorySlotListFieldNumber_codec);
      size += banGearListFieldNumber_.CalculateSize(_repeated_banGearListFieldNumber_codec);
      if (collectionFieldNumber_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CollectionFieldNumber);
      }
      size += allowedGearListFieldNumber_.CalculateSize(_repeated_allowedGearListFieldNumber_codec);
      if (CurExpFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurExpFieldNumber);
      }
      if (CurRerollFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurRerollFieldNumber);
      }
      if (CurTreasureMissCntFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurTreasureMissCntFieldNumber);
      }
      size += periodIdListFieldNumber_.CalculateSize(_repeated_periodIdListFieldNumber_codec);
      if (CurGearLostCntFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurGearLostCntFieldNumber);
      }
      if (CurWaveFieldNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CurWaveFieldNumber);
      }
      if (IsUnlockGearRerollFieldNumber != false) {
        size += 1 + 1;
      }
      if (IsUnlockGearBanFieldNumber != false) {
        size += 2 + 1;
      }
      size += cardListFieldNumber_.CalculateSize(_repeated_cardListFieldNumber_codec);
      size += gearDamageListFieldNumber_.CalculateSize(_repeated_gearDamageListFieldNumber_codec);
      size += statParamsFieldNumber_.CalculateSize(_repeated_statParamsFieldNumber_codec);
      if (IsGiveupFieldNumber != false) {
        size += 2 + 1;
      }
      if (CurUnusedRoundCntFieldNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CurUnusedRoundCntFieldNumber);
      }
      if (statLogInfoFieldNumber_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatLogInfoFieldNumber);
      }
      if (PeriodFirstRandomSeedFieldNumber != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PeriodFirstRandomSeedFieldNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EvolveBuildBattleInfo other) {
      if (other == null) {
        return;
      }
      if (other.CurLevelIdFieldNumber != 0) {
        CurLevelIdFieldNumber = other.CurLevelIdFieldNumber;
      }
      if (other.CurPeriodFieldNumber != 0) {
        CurPeriodFieldNumber = other.CurPeriodFieldNumber;
      }
      if (other.CurCoinFieldNumber != 0) {
        CurCoinFieldNumber = other.CurCoinFieldNumber;
      }
      weaponSlotListFieldNumber_.Add(other.weaponSlotListFieldNumber_);
      accessorySlotListFieldNumber_.Add(other.accessorySlotListFieldNumber_);
      banGearListFieldNumber_.Add(other.banGearListFieldNumber_);
      if (other.collectionFieldNumber_ != null) {
        if (collectionFieldNumber_ == null) {
          CollectionFieldNumber = new global::EggLink.DanhengServer.Proto.MLDIBDOFJFN();
        }
        CollectionFieldNumber.MergeFrom(other.CollectionFieldNumber);
      }
      allowedGearListFieldNumber_.Add(other.allowedGearListFieldNumber_);
      if (other.CurExpFieldNumber != 0) {
        CurExpFieldNumber = other.CurExpFieldNumber;
      }
      if (other.CurRerollFieldNumber != 0) {
        CurRerollFieldNumber = other.CurRerollFieldNumber;
      }
      if (other.CurTreasureMissCntFieldNumber != 0) {
        CurTreasureMissCntFieldNumber = other.CurTreasureMissCntFieldNumber;
      }
      periodIdListFieldNumber_.Add(other.periodIdListFieldNumber_);
      if (other.CurGearLostCntFieldNumber != 0) {
        CurGearLostCntFieldNumber = other.CurGearLostCntFieldNumber;
      }
      if (other.CurWaveFieldNumber != 0) {
        CurWaveFieldNumber = other.CurWaveFieldNumber;
      }
      if (other.IsUnlockGearRerollFieldNumber != false) {
        IsUnlockGearRerollFieldNumber = other.IsUnlockGearRerollFieldNumber;
      }
      if (other.IsUnlockGearBanFieldNumber != false) {
        IsUnlockGearBanFieldNumber = other.IsUnlockGearBanFieldNumber;
      }
      cardListFieldNumber_.Add(other.cardListFieldNumber_);
      gearDamageListFieldNumber_.Add(other.gearDamageListFieldNumber_);
      statParamsFieldNumber_.Add(other.statParamsFieldNumber_);
      if (other.IsGiveupFieldNumber != false) {
        IsGiveupFieldNumber = other.IsGiveupFieldNumber;
      }
      if (other.CurUnusedRoundCntFieldNumber != 0) {
        CurUnusedRoundCntFieldNumber = other.CurUnusedRoundCntFieldNumber;
      }
      if (other.statLogInfoFieldNumber_ != null) {
        if (statLogInfoFieldNumber_ == null) {
          StatLogInfoFieldNumber = new global::EggLink.DanhengServer.Proto.ECDIIKCMOJO();
        }
        StatLogInfoFieldNumber.MergeFrom(other.StatLogInfoFieldNumber);
      }
      if (other.PeriodFirstRandomSeedFieldNumber != 0) {
        PeriodFirstRandomSeedFieldNumber = other.PeriodFirstRandomSeedFieldNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurLevelIdFieldNumber = input.ReadUInt32();
            break;
          }
          case 16: {
            CurPeriodFieldNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            CurCoinFieldNumber = input.ReadUInt32();
            break;
          }
          case 34: {
            weaponSlotListFieldNumber_.AddEntriesFrom(input, _repeated_weaponSlotListFieldNumber_codec);
            break;
          }
          case 42: {
            accessorySlotListFieldNumber_.AddEntriesFrom(input, _repeated_accessorySlotListFieldNumber_codec);
            break;
          }
          case 50:
          case 48: {
            banGearListFieldNumber_.AddEntriesFrom(input, _repeated_banGearListFieldNumber_codec);
            break;
          }
          case 58: {
            if (collectionFieldNumber_ == null) {
              CollectionFieldNumber = new global::EggLink.DanhengServer.Proto.MLDIBDOFJFN();
            }
            input.ReadMessage(CollectionFieldNumber);
            break;
          }
          case 66:
          case 64: {
            allowedGearListFieldNumber_.AddEntriesFrom(input, _repeated_allowedGearListFieldNumber_codec);
            break;
          }
          case 72: {
            CurExpFieldNumber = input.ReadUInt32();
            break;
          }
          case 80: {
            CurRerollFieldNumber = input.ReadUInt32();
            break;
          }
          case 88: {
            CurTreasureMissCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            periodIdListFieldNumber_.AddEntriesFrom(input, _repeated_periodIdListFieldNumber_codec);
            break;
          }
          case 104: {
            CurGearLostCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 112: {
            CurWaveFieldNumber = input.ReadUInt32();
            break;
          }
          case 120: {
            IsUnlockGearRerollFieldNumber = input.ReadBool();
            break;
          }
          case 128: {
            IsUnlockGearBanFieldNumber = input.ReadBool();
            break;
          }
          case 138: {
            cardListFieldNumber_.AddEntriesFrom(input, _repeated_cardListFieldNumber_codec);
            break;
          }
          case 146: {
            gearDamageListFieldNumber_.AddEntriesFrom(input, _repeated_gearDamageListFieldNumber_codec);
            break;
          }
          case 154:
          case 152: {
            statParamsFieldNumber_.AddEntriesFrom(input, _repeated_statParamsFieldNumber_codec);
            break;
          }
          case 160: {
            IsGiveupFieldNumber = input.ReadBool();
            break;
          }
          case 168: {
            CurUnusedRoundCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 178: {
            if (statLogInfoFieldNumber_ == null) {
              StatLogInfoFieldNumber = new global::EggLink.DanhengServer.Proto.ECDIIKCMOJO();
            }
            input.ReadMessage(StatLogInfoFieldNumber);
            break;
          }
          case 184: {
            PeriodFirstRandomSeedFieldNumber = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurLevelIdFieldNumber = input.ReadUInt32();
            break;
          }
          case 16: {
            CurPeriodFieldNumber = input.ReadUInt32();
            break;
          }
          case 24: {
            CurCoinFieldNumber = input.ReadUInt32();
            break;
          }
          case 34: {
            weaponSlotListFieldNumber_.AddEntriesFrom(ref input, _repeated_weaponSlotListFieldNumber_codec);
            break;
          }
          case 42: {
            accessorySlotListFieldNumber_.AddEntriesFrom(ref input, _repeated_accessorySlotListFieldNumber_codec);
            break;
          }
          case 50:
          case 48: {
            banGearListFieldNumber_.AddEntriesFrom(ref input, _repeated_banGearListFieldNumber_codec);
            break;
          }
          case 58: {
            if (collectionFieldNumber_ == null) {
              CollectionFieldNumber = new global::EggLink.DanhengServer.Proto.MLDIBDOFJFN();
            }
            input.ReadMessage(CollectionFieldNumber);
            break;
          }
          case 66:
          case 64: {
            allowedGearListFieldNumber_.AddEntriesFrom(ref input, _repeated_allowedGearListFieldNumber_codec);
            break;
          }
          case 72: {
            CurExpFieldNumber = input.ReadUInt32();
            break;
          }
          case 80: {
            CurRerollFieldNumber = input.ReadUInt32();
            break;
          }
          case 88: {
            CurTreasureMissCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 98:
          case 96: {
            periodIdListFieldNumber_.AddEntriesFrom(ref input, _repeated_periodIdListFieldNumber_codec);
            break;
          }
          case 104: {
            CurGearLostCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 112: {
            CurWaveFieldNumber = input.ReadUInt32();
            break;
          }
          case 120: {
            IsUnlockGearRerollFieldNumber = input.ReadBool();
            break;
          }
          case 128: {
            IsUnlockGearBanFieldNumber = input.ReadBool();
            break;
          }
          case 138: {
            cardListFieldNumber_.AddEntriesFrom(ref input, _repeated_cardListFieldNumber_codec);
            break;
          }
          case 146: {
            gearDamageListFieldNumber_.AddEntriesFrom(ref input, _repeated_gearDamageListFieldNumber_codec);
            break;
          }
          case 154:
          case 152: {
            statParamsFieldNumber_.AddEntriesFrom(ref input, _repeated_statParamsFieldNumber_codec);
            break;
          }
          case 160: {
            IsGiveupFieldNumber = input.ReadBool();
            break;
          }
          case 168: {
            CurUnusedRoundCntFieldNumber = input.ReadUInt32();
            break;
          }
          case 178: {
            if (statLogInfoFieldNumber_ == null) {
              StatLogInfoFieldNumber = new global::EggLink.DanhengServer.Proto.ECDIIKCMOJO();
            }
            input.ReadMessage(StatLogInfoFieldNumber);
            break;
          }
          case 184: {
            PeriodFirstRandomSeedFieldNumber = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
